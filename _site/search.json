[

  {
    "title": "The Future of Rails: Bridging the Generation Gap",
    "url": "/rails/community/future/2025/09/25/the-future-of-rails-bridging-the-generation-gap/",
    "date": "2025-09-25T10:00:00-05:00",
    "tags": ["rails","community","mentorship","future","culture"],
    "excerpt": "Rails has lived through multiple generations. The gap between them is real, but it doesn't have to be a divide. How we bridge these generations will shape Rails' next chapter.",
    "content": "This is the final post in The Rails Generation Gap series.Looking back, Rails has lived through at least two “generations.” The early adopters, many of whom were drawn in by _why’s whimsy or Ryan Bates’ RailsCasts, built the culture of long form, handcrafted knowledge. The next wave, fueled by bootcamps, brought scale, diversity, and a flood of new energy.The gap between those generations is real. You can feel it in the different ways people learn, communicate, and even argue about best practices. But gaps don’t have to be divides. They can be bridges.What excites me is the chance to combine the best of both worlds. The early Rails culture valued depth, curiosity, and mentorship. The new Rails culture values accessibility, speed, and inclusivity. Imagine if we blended those strengths. If beginners had both the quick answers and the long form context, both the Slack channel and the detailed write up.Rails isn’t dead, despite what the hot takes say. It’s evolving. And maybe this generation gap is exactly what will keep it alive. Each wave brings something new to the table. The challenge, and the opportunity, is to make sure we don’t lose the best parts of what came before.What each generation bringsThe early Rails generation brought craftsmanship. They read source code for fun. They wrote blog posts that explained not just how to do something, but why you’d want to. They built tools like RailsCasts and _why’s guides that made learning feel like an adventure.That generation also brought patience. They were willing to spend hours debugging a problem, not just to fix it, but to understand it. They mentored newcomers one on one, passing down not just techniques but philosophy.The bootcamp generation brought pragmatism. They focused on shipping working software quickly. They democratized access to Rails knowledge through structured curricula and supportive communities. They proved that you don’t need a computer science degree to build great web applications.They also brought fresh perspectives. Many bootcamp graduates came from other industries and brought domain expertise that enriched the Rails ecosystem. They asked different questions and solved different problems.Where the friction happensThe tension between generations shows up in predictable places.Code reviews become philosophical debates. A veteran might suggest a more “Rails way” approach, while a newer developer pushes back with “but this works and ships faster.” Both are right, but they’re optimizing for different things.Hiring conversations get complicated. Teams struggle to evaluate candidates who learned Rails in fundamentally different ways. Do you value someone who can explain Active Record’s internals, or someone who can ship features quickly using modern tools?Technical decisions become generational markers. Should we use the latest JavaScript framework or stick with Rails’ built in solutions? Should we prioritize developer experience or application performance? Different generations often have different default answers.Building bridgesThe smartest teams I’ve worked with find ways to bridge these differences instead of letting them become divisions.They create space for both quick answers and deep dives. Code reviews include both “here’s how to fix this” and “here’s why this pattern exists.” Documentation covers both the how and the why. Team discussions welcome both “let’s ship this” and “let’s understand this.”They also recognize that different situations call for different approaches. When you’re prototyping a new feature, bootcamp style speed might be exactly what you need. When you’re debugging a performance issue, old school depth becomes essential.The key is making these choices intentional rather than accidental. Teams that bridge the gap well talk explicitly about when to optimize for speed versus understanding, when to use established patterns versus trying new approaches.Learning from each otherI’ve seen veterans learn as much from newcomers as the other way around. A senior developer who’s been writing Rails for fifteen years might discover a gem or technique that solves a problem they’ve been wrestling with for months.Newcomers bring fresh eyes to old problems. They question assumptions that veterans take for granted. They’re not weighed down by “we tried that before and it didn’t work” thinking.Veterans bring context that prevents newcomers from repeating old mistakes. They can explain why certain patterns exist, what problems they solve, and when they might not be the right choice.The magic happens when these perspectives combine. Veterans who stay curious and newcomers who value context create teams that are both fast and thoughtful.The community opportunityIndividual teams can only do so much. The Rails community as a whole has an opportunity to model how different generations can work together.Conference lineups that include both established voices and fresh perspectives. Open source projects that welcome both deep architectural discussions and practical feature requests. Learning resources that cater to both quick reference needs and comprehensive understanding.The Rails community has always been good at this, but it requires ongoing attention. As the framework matures and the community grows, it’s easy for different groups to drift into their own corners.What’s next for RailsRails is entering an interesting phase. It’s mature enough to have established patterns and best practices, but still evolving enough to incorporate new ideas and approaches.The framework itself reflects this balance. Rails 7 includes both time tested conventions and modern innovations like Hotwire. It respects the Rails way while acknowledging that the web has changed since 2004.The community is following a similar path. Long form blog posts coexist with quick video tutorials. Detailed documentation sits alongside interactive learning platforms. Traditional mentorship happens alongside community driven support.This isn’t a compromise or a watered down middle ground. It’s a recognition that different people learn differently and different situations require different approaches.Making it workThe future of Rails depends on how well we navigate this generational transition. Do we let the gap become a divide, with different groups talking past each other? Or do we build bridges that let everyone contribute their strengths?I’m optimistic because I’ve seen it work. Teams that embrace both speed and depth. Communities that welcome both newcomers and veterans. Projects that balance innovation with stability.It requires intentionality though. We have to actively create space for different perspectives. We have to resist the urge to dismiss approaches that don’t match our own preferences. We have to remember that the goal is building great software and supporting each other, not proving that our way is the only way.The long viewWhen I think about the future of Rails, I don’t picture one side winning out. I picture a conversation across generations. Old guard and new guard alike, figuring out how to build not just great apps, but a community that lasts.Rails has survived multiple technology cycles, framework wars, and predictions of its demise. It’s survived because it adapts while staying true to its core principles. The generation gap is just the latest challenge, and I think it’s one the community can handle.The early Rails generation built something special. The bootcamp generation expanded it and made it accessible. The next generation will inherit both legacies and build something even better.Closing thoughtSo when I think about the future of Rails, I see opportunity. The chance to combine the craftsmanship of the early days with the accessibility of the modern era. The chance to build a community that values both depth and speed, both tradition and innovation.The generation gap is real, but it doesn’t have to be permanent. With intention, patience, and mutual respect, it can become a bridge to something better.What’s your vision for the future of Rails? How do you think we can best bridge the generational differences in our community?Previous: Mentorship in Rails: From One-on-One to At-ScaleThanks for following along with this series. If you missed any posts, you can find them all under the Rails Generation Gap tag. I’d love to hear your thoughts on how we can build better bridges in the Rails community."
  },

  {
    "title": "Mentorship in Rails: From One-on-One to At-Scale",
    "url": "/rails/mentorship/career/2025/09/22/mentorship-in-rails-from-one-on-one-to-at-scale/",
    "date": "2025-09-22T10:00:00-05:00",
    "tags": ["rails","mentorship","bootcamps","career","teaching"],
    "excerpt": "How Rails mentorship evolved from intimate one-on-one relationships to scaled approaches. What we kept, what we lost, and what we're still figuring out.",
    "content": "This is part 4 of The Rails Generation Gap series.Early in my career, mentorship was intimate. You had one person, maybe two, showing you the ropes. They’d sit with you, review your code, explain why Rails did things a certain way. That relationship shaped not just your code, but your habits and your confidence.But as bootcamps took off, companies suddenly had to onboard groups of juniors at once. I remember watching teams try to scale mentorship in real time. Pair programming rotations, “office hours,” internal wikis. It wasn’t bad, but it was different. Instead of a single guide, you got a patchwork of advice from whoever had time that day.I’ve been on both sides of that equation. I’ve been the junior, grateful for a patient mentor who explained things three different ways until it finally clicked. And I’ve been the mentor, with limited hours, trying to balance teaching with shipping. Scaling mentorship is hard. You want to give each person that “deep dive” experience, but reality often means handing out quick fixes instead.The Rails community has always valued helping others grow. The question is, how do we maintain that spirit when the numbers don’t add up? When there are more new developers than seasoned ones? Maybe it’s about rethinking what mentorship looks like. Maybe it’s not one to one anymore, but one to many: blog posts, screencasts, livestreams, open source.The old modelWhen I started Rails in 2008, mentorship felt more like an apprenticeship. You’d find someone who knew the framework, and they’d take you under their wing. Not because they had to, but because that’s how the community worked.I remember my first Rails mentor. He’d spend an hour walking me through a single method, explaining not just what it did, but why it existed, what problems it solved, and what could go wrong if I used it incorrectly. He’d show me the source code, point me to related patterns, and give me homework: “Go read this chapter, then come back with questions.”That kind of mentorship was slow, but it was thorough. You didn’t just learn Rails, you learned how to think about Rails. You absorbed the philosophy along with the syntax.The relationship mattered too. When you hit a wall, you knew exactly who to ask. When you made progress, you had someone to share it with. That mentor became invested in your growth in a way that felt personal.The scaling challengeThen bootcamps changed the math. Suddenly, companies weren’t hiring one junior developer every few months. They were hiring cohorts of five, ten, sometimes twenty new developers at once.The old mentorship model broke down fast. You can’t assign twenty juniors to five seniors and expect the same quality of guidance. The seniors burn out, the juniors get frustrated, and everyone starts looking for shortcuts.I watched teams try different approaches. Some did pair programming rotations where juniors worked with a different senior each week. Others set up “office hours” where seniors made themselves available for questions at specific times. A few tried to document everything in internal wikis and hope for the best.Each approach had tradeoffs. Rotation meant juniors got exposure to different styles, but lost the continuity of a single relationship. Office hours were efficient, but felt transactional. Documentation was scalable, but couldn’t answer follow up questions or adapt to individual learning styles.What we lostThe shift to scaled mentorship solved the numbers problem, but it changed the experience in ways we’re still figuring out.The biggest loss was depth. When you have one mentor, they can tailor their teaching to how you learn. They know your strengths and blind spots. They can push you when you need it and slow down when you’re struggling.With scaled approaches, you often get generic advice. The person helping you today doesn’t know what you learned yesterday or what you’re planning to work on tomorrow. They solve your immediate problem, but they can’t help you connect the dots.The relationship aspect suffered too. It’s harder to build trust and rapport when you’re working with a different person each week. Juniors become more hesitant to ask “dumb” questions. Seniors become more focused on quick fixes than deep understanding.I’ve seen this play out in code reviews. In the old model, a mentor might spend twenty minutes explaining why a particular approach was problematic and walking through alternatives. In the scaled model, you’re more likely to get a comment like “use includes here” without much context about why.What we keptBut scaled mentorship isn’t all bad. In some ways, it’s better than the old model.Exposure to different perspectives is valuable. When you work with multiple seniors, you see different approaches to the same problems. You learn that there’s often more than one “right” way to do something.It’s also more resilient. In the old model, if your mentor left the company or got busy with other projects, you were stuck. With scaled approaches, there’s always someone else who can help.The documentation and process focus has benefits too. When teams are forced to write down their knowledge, it becomes more accessible to everyone. New hires can get up to speed faster, and existing team members can reference shared resources instead of asking the same questions over and over.New forms of mentorshipThe most interesting development has been the emergence of new mentorship models that work at scale.Some companies have started formal apprenticeship programs where juniors spend their first six months rotating through different teams and projects. It’s structured, but it preserves some of the depth of traditional mentorship.Others have embraced asynchronous mentorship through internal blogs, recorded code reviews, and shared learning resources. Seniors document their decision making process, and juniors can learn from it even when they’re not working directly together.Open source has become a mentorship platform too. Contributing to Rails or popular gems gives you access to feedback from experienced developers around the world. It’s not as personal as traditional mentorship, but it’s incredibly scalable.The Rails community has also gotten better at creating learning content. Podcasts, YouTube channels, newsletters, and blogs provide ongoing education that supplements whatever formal mentorship exists at work.Making it workSuccessful teams I’ve worked with combine multiple approaches. They might have formal mentor assignments for the first few months, then transition to more flexible arrangements as juniors gain confidence.They also recognize that different people need different kinds of support. Some juniors thrive with lots of independence and occasional check ins. Others need more hands on guidance. Scaled mentorship works better when it’s flexible enough to accommodate both.The key is being intentional about it. Teams that just throw juniors into the mix and hope for the best usually struggle. Teams that think carefully about how to provide guidance and support at scale tend to do better.The community angleIndividual companies can only do so much. The Rails community as a whole has a role to play in mentorship too.The culture of helping others is still there, but it’s expressed differently now. Instead of one on one relationships, it’s blog posts that explain complex concepts, conference talks that share hard won lessons, and open source contributions that make the framework better for everyone.Social media has become a mentorship platform too. Twitter threads, LinkedIn posts, and Discord conversations provide bite sized learning opportunities. It’s not as deep as traditional mentorship, but it’s accessible to anyone with an internet connection.The challenge is signal to noise. There’s so much content out there that it can be hard to find the good stuff. Curation becomes important. Lists of recommended resources, community endorsed tutorials, and trusted voices help filter the noise.Looking aheadMentorship in Rails will keep evolving. Remote work has changed the dynamics again. AI tools are starting to provide some of the quick answers that used to require human help. The next generation of developers will have different expectations and different needs.But the core principle remains the same: experienced developers helping newer ones grow. The format might change, but the spirit endures.The question isn’t whether scaled mentorship is better or worse than the old model. It’s how we can make it work better. How do we preserve the depth and relationship building that made traditional mentorship valuable while still serving the larger numbers of people who want to learn Rails today?I think the answer is hybrid approaches. Formal programs for structure, informal relationships for depth, community resources for scale, and flexibility to adapt as people’s needs change.Closing thoughtMentorship is still here. It just doesn’t always look like sitting next to someone at their desk. The challenge is making sure it doesn’t get lost in the noise.If you’re a senior developer, think about how you can contribute to mentorship at scale. Write that blog post. Record that screencast. Answer questions in community forums. Review that open source PR with detailed feedback.If you’re a junior developer, seek out multiple sources of guidance. Find formal mentors when you can, but also build relationships with peers, contribute to open source, and engage with the broader community.The Rails community has always been about helping each other grow. That hasn’t changed, even if the methods have.What’s your experience with mentorship in Rails? How has it evolved in your career, and what approaches have worked best for you?Previous: From Mailing Lists to Slack: How Rails Culture Shifted"
  },

  {
    "title": "From Mailing Lists to Slack: How Rails Culture Shifted",
    "url": "/rails/community/culture/2025/09/19/from-mailing-lists-to-slack-how-rails-culture-shifted/",
    "date": "2025-09-19T10:00:00-05:00",
    "tags": ["rails","mentorship","community","culture","communication"],
    "excerpt": "The way Rails developers find help has changed completely. What we gained and lost in the shift from mailing lists to instant answers.",
    "content": "This is part 3 of The Rails Generation Gap series.The platforms changed everything. Not just how we get help, but what kind of help we expect and how we relate to each other while getting it.I was thinking about this after watching a new Rails developer post the same question in three different Discord channels, get three different answers in under five minutes, pick one that worked, and move on. No follow up. No “thanks, that makes sense now.” Just problem solved, next task.Compare that to the mailing list thread I still have bookmarked from 2009. Someone asked about routing constraints. The first reply explained how constraints work. The second added context about performance implications. The third linked to a blog post about advanced routing patterns. By the end, five people had chimed in, and the original poster understood not just how to fix their immediate problem, but why the solution worked and what to watch out for next time.Both approaches get you unstuck. But they create very different learning experiences and very different communities.The mailing list eraBack in the day, Rails had a few key gathering spots. The Rails mailing list. The Ruby Talk list. IRC channels like #rubyonrails on Freenode. These weren’t fast, but they were thoughtful.When you posted a question, you knew you might wait. That waiting time wasn’t wasted though. You’d often spend it digging deeper into the problem, reading source code, or trying different approaches. By the time someone replied, you had context for their answer.The replies themselves were different too. People didn’t just drop a code snippet and disappear. They’d explain the why, point you to related concepts, and often end with something like “let me know if that helps” or “feel free to ask follow ups.”I remember one thread where I asked about caching strategies. The response wasn’t just the syntax I needed. It was a mini lesson on cache invalidation, Rails conventions, and a suggestion to read a specific chapter of the Pickaxe book. That person took time to teach, not just solve.IRC was the closest thing we had to instant help, but even there, the culture was different. Channels had regulars who knew each other. There were inside jokes, ongoing conversations, and a sense of continuity. When you asked a question, someone might say “hang on, let me check something” and disappear for ten minutes. Then they’d come back with a detailed explanation or a link to a blog post they’d written about the exact same problem.The pace was slower, but the depth was there. People stuck around for follow up questions. They’d check in later to see if their suggestion worked. It felt like a workshop where everyone was learning together.The shift to instant everythingThen came the platforms we know today. Stack Overflow launched in 2008 and quickly became the go to for programming questions. Discord and Slack made real time chat mainstream. Bootcamp communities created their own support networks.The speed improvement was dramatic. Post a question on Stack Overflow and you might get an answer in minutes. Jump into a Discord channel and someone’s usually around to help immediately.But something changed in the process. The incentives shifted from teaching to solving. Stack Overflow rewards quick, correct answers. Discord conversations move fast and get buried. The patient, context rich exchanges of the mailing list era became harder to find.The new platforms brought real benefits. You don’t need to know about mailing lists or IRC to get help. The barriers to entry dropped significantly. When you’re stuck and need to ship something, getting unstuck in minutes instead of hours matters. More people asking and answering questions means more edge cases get covered. Stack Overflow’s format makes it easy to find existing answers to common problems.The Rails community became more welcoming to newcomers. If you’re learning Rails today, you have resources that would have seemed magical in 2008.What we lostBut we also lost some things that mattered.Quick answers often skip the why. You get the fix without understanding the underlying concepts. Transactional help doesn’t build the same bonds as ongoing mentorship. The pressure to answer fast can lead to surface level solutions that work but aren’t optimal. The expectation of instant answers can make people less willing to struggle with problems on their own first.I’ve seen this play out in hiring. Candidates who learned Rails through bootcamps and Stack Overflow can often ship features quickly, but struggle when asked to explain the tradeoffs behind their choices. They know the how, but not always the why.On the flip side, I’ve worked with veterans who dismiss newer developers as “just copying and pasting from Stack Overflow” without recognizing that those same developers often bring fresh perspectives and aren’t weighed down by legacy assumptions.Bridging old and newThe most effective teams I’ve worked with find ways to blend both approaches.They use modern tools for speed and accessibility, but create space for deeper learning. Code reviews become teaching moments. Senior developers write internal blog posts explaining not just what they built, but why they made specific choices. Teams have “office hours” where anyone can ask questions and get more than just a quick fix.Some companies have started formal mentorship programs. Others encourage developers to write long form posts about problems they’ve solved. A few have experimented with “slow” Slack channels where the expectation is thoughtful responses, not instant fixes.The tools have changed, but the human need for mentorship and community hasn’t. We just need to be more intentional about creating space for it.The hybrid approachI think the ideal is a hybrid approach. Keep the accessibility and speed of modern platforms, but find ways to inject more depth and relationship building.Some Discord servers have dedicated channels for deeper discussions. Some Stack Overflow answers go well beyond the minimum viable solution. Some bootcamps pair students with mentors for ongoing guidance beyond the curriculum.Rails is at an interesting inflection point. It’s mature enough that the basics are well documented, but complex enough that there’s still plenty to learn. The community is bigger and more diverse than ever, but also more fragmented.How we handle that fragmentation will shape the next generation of Rails developers. Do we optimize purely for speed and efficiency? Or do we find ways to preserve some of the mentorship culture that made Rails special in the first place?What’s nextThe shift from mailing lists to Slack isn’t just about technology. It reflects how Rails grew from a tight knit craft community to a mainstream framework. Both eras had their strengths.The question isn’t whether the old ways were better. It’s what we can learn from them to make the current community even stronger.If you’ve lived through both sides of this shift, what differences have you noticed? How do you think we can bring back some of that depth and mentorship in today’s fast paced world?Previous: Rails Before Bootcamps — A Tight‑Knit Craft Community"
  },

  {
    "title": "Rails Before Bootcamps — A Tight‑Knit Craft Community",
    "url": "/rails/community/history/2025/09/15/rails-before-bootcamps-a-tight-knit-craft-community/",
    "date": "2025-09-15T10:00:00-05:00",
    "tags": ["rails","mentorship","community","history"],
    "excerpt": "How the early Rails community learned in public — and what we can bring forward now.",
    "content": "This is part 2 of The Rails Generation Gap series.When people talk about the early Rails community, they often focus on the code. But for me, what stands out are the characters, the voices, and the quirky ways people learned.When I started Rails in 2008, the framework had been around for a few years but learning it wasn’t as structured as it is today. There weren’t week-by-week curricula, Slack mentors on call, or neat tutorials for every error message. Instead, newcomers like me relied on a patchwork of pioneers who shared their wisdom in creative, sometimes eccentric ways.It was messy. It was magical. And it shaped those of us who learned Rails in that era.RailsCasts: Mentorship at ScaleIf you were learning Rails in 2008 or the early 2010s, chances are you watched Ryan Bates’ RailsCasts. My daughter knew the opening music from RailsCasts and would ask “Are you watching that guy again?”Every week, Ryan released a short screencast walking through a gem, a pattern, or a tricky concept. They weren’t flashy. They were practical, approachable, and packed with insight. For many of us who started around that time, RailsCasts was the bootcamp before bootcamps existed.I still remember pausing a RailsCasts episode every 30 seconds to copy code into my editor, rewinding when I inevitably missed a step. Ryan had this gift for making complex things feel doable. He wasn’t just teaching features—he was teaching how to think in Rails.To this day, RailsCasts remains a cultural landmark. The catalog stopped updating in 2013, but developers still revisit those episodes like treasured textbooks._why the Lucky Stiff: The Poet of RubyThe Rails community also had its artists. None more famous—or infamous—than _why the lucky stiff._why wasn’t about documentation or best practices. He was about joy. His works—like Why’s (Poignant) Guide to Ruby—were whimsical, surreal, and filled with cartoon foxes. It was less a tutorial and more a love letter to programming.For many newcomers, _why’s writing made Ruby feel human. He reminded us that code wasn’t just logic; it was creativity. His sudden disappearance in 2009 left a hole, but his spirit still lingers in how Rubyists value expressiveness and fun.I won’t go into the details here but check out these articles to learn more about _why:  slate.com article  smashingmagizine.com article  Why’s (Poignant) Guide to RubyRails for Zombies: Learning Could Be PlayfulNot long after, platforms like Code School (before it became Pluralsight) gave us Rails for Zombies, an interactive, gamified way to learn Rails right in the browser.Instead of dry documentation, you solved challenges to help animated zombies complete tasks. It was playful, experimental, and hinted at what was coming: a world where Rails education could be accessible to anyone, not just those willing to dig through mailing lists and source code.Check out the Rails Conf 2013 Rails for Zombies talk to see what I mean.What This Era Felt LikeTaken together, RailsCasts, _why, and Rails for Zombies illustrate the unique vibe of the pre-bootcamp era:DIY Learning → You pieced things together from blogs, screencasts, and mailing lists.Personal Mentorship → Help often came from a single person’s voice, not a company’s curriculum.Culture &amp; Quirk → Learning Rails wasn’t sterile; it was filled with personality, creativity, and play.It felt like joining a small club where everyone knew each other’s names. But it also meant access was uneven. If you didn’t stumble onto RailsCasts, or if _why’s whimsical style didn’t click with you, your learning curve could be brutal.What We Carry ForwardLooking back, I think this era left us with two big lessons:Learning is cultural, not just technical. The Rails community thrived because it had voices like Ryan Bates and _why who made knowledge stick.Accessibility matters. Rails for Zombies hinted at something powerful—that playful, approachable learning could open doors to more people. Bootcamps would later take this idea to scale.Closing ThoughtThe Rails of yesterday was small, quirky, and often hard to penetrate. But it was also a place where creativity, mentorship, and community shone through individual voices.If you learned Rails through RailsCasts, _why, or Rails for Zombies—what do you remember most? And what do you think today’s newcomers are missing without those touchstones?            Previous: The Rails Generation Gap: Why It Matters      Next: From Mailing Lists to Slack: How Rails Culture Shifted      "
  },

  {
    "title": "What finally fixed our deployment and Sidekiq mess",
    "url": "/rails/production/2025/09/12/what-finally-fixed-our-deployment-and-sidekiq-mess/",
    "date": "2025-09-12T11:00:00-05:00",
    "tags": ["sidekiq","deployment","passenger","mysql","redis","activerecord","database-pool"],
    "excerpt": "A week of production chaos taught me that Sidekiq failures aren't always about Sidekiq. Sometimes it's your database connection pool that's starving everything else.",
    "content": "Over the last week I hit a cluster of production problems that looked unrelated at first: intermittent deploys that “completed” but left the app unresponsive, email blasts that “finished” with zero sends, and a Sidekiq dashboard screaming 60–70% failure rates. This post is my straight‑from-the-console write‑up of what actually broke, how I tracked it down, and the simple changes that stabilized everything.If you’re running Rails on Nginx + Passenger with MySQL, Redis, and Sidekiq (and some Delayed Job still hanging around), this will probably feel familiar.The symptoms  Deploy “succeeds,” site feels sluggish or unresponsive afterward.  Sidekiq shows high failure rates, idle workers, and no throughput.  Email blasts target thousands of customers but report zero sent.  Logs full of noise in test and prod, making the real issues easy to miss.The real root causeIt wasn’t a single bug. It was a perfect storm:  A Ruby upgrade changed memory/boot characteristics.  I had both Sidekiq and Delayed Job running (historical reasons).  Passenger was running multiple app processes.  And the big one: the database pool was way too small.Sidekiq wasn’t “broken.” It was starved. Jobs were dying with:could not obtain a database connection within 5.000 secondsOnce I stopped staring at Sidekiq’s failure counter and looked at actual error classes in Retry/Dead sets, the picture was obvious: ActiveRecord connection timeouts across the board.The simple calculation that mattersThis is the mental model I now use and documented in a deployment guide for future reference.You need at least:  Passenger processes (each wants a DB connection)  plus Sidekiq threads across all processes  plus a little buffer (console, rake tasks, admin scripts, spikes)Example from my production box:  Passenger: 5 processes  Sidekiq: 1 process × 3 threads (I dialed this down)  Buffer: 5–10 (call it 7 for “stuff you forgot”)So minimum pool = 5 (Passenger) + 3 (Sidekiq) + 7 (buffer) = 15.I set it to 25 because the server has plenty of RAM (32 GB) and I’d rather have headroom than timeouts.Production database.yml ended up like this:production:  adapter: mysql2  pool: 25  host: localhost  # …rest omittedAfter bumping the pool, the connection timeouts disappeared immediately.The Sidekiq side of the houseI also simplified my worker setup. I don’t need hero numbers here—predictability beats bragging rights. I now run:  Concurrency (threads): 3  Processes: start one Sidekiq process (or two if I’m pushing a big blast)My sidekiq.yml reflects that::concurrency: 3:queues:  - [critical, 10]  - [email_blast, 6]  - [default, 5]If I want more fault tolerance or better CPU spread, I start a second Sidekiq process with the same concurrency. Two procs × 3 threads = 6 total DB connections, still fine under a 25‑connection pool.The email blast gotcha (Sidekiq vs Delayed Job)My email blasts were “completing” with zero sends. The reason: the controller path had been switched to run synchronously during an earlier incident, while mailers still used deliver_later (which goes through ActiveJob → Delayed Job in this app). That left me in a half‑migrated state: some work in Sidekiq, some in DJ, both competing for the same small pool.I re‑enabled async sending for blasts and let Sidekiq handle it. The worker is straight‑forward and logs failures cleanly:class SendEspecialsWorker  include Sidekiq::Worker  sidekiq_options queue: :email_blast, retry: 3  def perform(account_id, coupons, email_blast_id = nil)    account = Account.find(account_id)    email_blast = email_blast_id &amp;&amp; EmailBlast.find(email_blast_id)    account.send_especial(coupons, true, email_blast)  endendKey point: pick one background system per workflow. Mixing Sidekiq and Delayed Job on the same hot paths is a great way to create invisible contention.What I run before deploy nowI pulled these steps into the deployment guide so I don’t “cowboy fix” at 2am again. The gist:  Clean up any straggler processes (nginx, passenger, delayed_job, ruby)  Drop caches and restart in a clean order  Start Sidekiq to the target concurrencysudo systemctl stop nginxsudo pkill -f delayed_job; sudo pkill -f passenger; sudo pkill -f rubysudo sync &amp;&amp; echo 3 | sudo tee /proc/sys/vm/drop_cachessudo systemctl start nginx# start sidekiq with -c 3 and proper logs/PIDsThen I watch the first few minutes like a hawk:  passenger-status for process health and queue length  Sidekiq stats for processed/failed trends and queue sizes  Memory and swap to catch early pressureQuick checks that saved me time  Confirm Sidekiq’s “Failed” vs Retry/Dead sets. Dashboard counters are cumulative. The real signal is “do new jobs fail?”  Use Sidekiq::Stats.new and print before/after numbers around a test job. If processed goes up without failed, you’re good.  Don’t trust logger levels alone in tests if you’re using puts. puts goes to STDOUT regardless; either switch to Rails.logger or redirect STDOUT in test.What I’d do differently next time  Size the DB pool first. It’s the cheapest lever with the highest upside.  Avoid half‑migrations. If a workflow starts on Sidekiq, finish the job and remove the Delayed Job path (or vice versa).  Keep Sidekiq boring: low concurrency, more processes only when needed, queue weights tuned to business priorities.  Document the decision math in the deployment guide, so future me doesn’t have to reconstruct it under pressure.TL;DR  The chronic failures weren’t Sidekiq being flaky—they were ActiveRecord connection timeouts.  Passenger procs + Sidekiq threads + a buffer must fit under your DB pool.  On a 32 GB host, a pool: 25 is a rounding error in memory and buys you stability.  Run email blasts async in Sidekiq; don’t split them across Sidekiq and Delayed Job.  Keep Sidekiq to 3 threads per process unless you’ve proven you need more.If you want the full step‑by‑step let me know. I put everything into a document including cleanup commands, monitoring, and the connection math. It’s the checklist I wish I’d had before the week started."
  },

  {
    "title": "The Rails Generation Gap: Why It Matters",
    "url": "/rails/community/career/2025/09/12/the-rails-generation-gap-why-it-matters/",
    "date": "2025-09-12T10:00:00-05:00",
    "tags": ["rails","mentorship","bootcamps","community","culture"],
    "excerpt": "From mailing lists to bootcamps, the way people enter Rails has changed. That shift affects how we hire, mentor, and build.",
    "content": "I still remember the first time I got truly stuck on a Rails bug in 2008. I sent a question to a mailing list and figured I might never hear back. An hour later, a stranger replied with a fix, an explanation, and a reminder to pay it forward. Before I knew it, I had met a total stranger and they were mentoring me. That was the vibe when I started: small, tight knit, and very collaborative.Jump ahead a decade and the on ramp looks different. Fewer mailing lists. More bootcamps, YouTube, Discord, and Stack Overflow. Folks learn fast, ship fast, and get help in new places. Rails changed, but the bigger shift was how people came into the community and learned the craft.That shift is what I think of as the Rails Generation Gap. We do not talk about it enough, and it matters.I am starting a short series on this. I will look at the early craft culture, the bootcamp boom, the cultural shifts that came with it, and some practical ways to bridge the gap. The idea for this series was what I cam away from with the first Rails meetup I have been to in years, which I wrote about here.Before bootcamps: a craft cultureWhen I started with Rails in 2008, it still felt like magic. Convention over configuration made things click. Getting started was not easy though. Docs were thin, posts were dense, and half the time you learned by reading the source.The upside was depth. Those of us who came in during that era learned the how and the why. Mentorship was built in because it had to be.It also felt closed at times. Fewer entry points. Less diversity. Sometimes it read like an insider club.The bootcamp boomAround 2013, bootcamps exploded. Course Report counted roughly two thousand grads in 2013. By 2019, it was more than twenty three thousand a year, and Rails was everywhere in those programs.Rails made sense for teaching. You could get someone to a working web app in weeks, not months. For career changers, that was huge.More people in the community was a good thing. It opened doors beyond CS degrees and long nights reading code.The gapGrowth comes with tradeoffs. Some of the old guard saw bootcamp grads as folks who could ship but could not explain what Active Record was doing under the hood. Some newcomers saw veterans as unapproachable or stuck in old patterns.The way we shared knowledge changed too. Long form posts and deep dives gave way to shorter answers and quick videos. Stack Overflow peaked around 2013 to 2015 and then slid. By 2023, new questions were down about seventy seven percent compared to 2009.That shift in how we learn and teach created friction.Why it still mattersRails is mature now. It is not the new hot thing. The gap still shows up in day to day work.  Hiring and onboarding: I have seen teams struggle to bring on a lot of juniors without strong mentorship in place.  Open source health: Rails thrives on contribution. Without context and a habit of paying it forward, it gets harder to sustain.  Mixing voices: Veterans bring depth. New folks bring energy and fresh perspective. We need both.Whether we talk to each other, or past each other, determines a lot about where Rails goes next.Closing the gapA few practical moves I have seen help:  Veterans can share not just code, but the history and tradeoffs that shaped Rails.  Bootcamp grads can document what they learn and pull others up the ladder behind them.  Companies can try apprenticeship style onboarding and give seniors time to mentor.Rails has always been more than code. Community is the multiplier. How we teach, share, and build will shape the next decade.What is nextThis is the first post in a short series on the Rails Generation Gap. Next up, I will rewind to the early era of screencasts, whimsical guides, and in person mentorship, and pull forward the parts that still work today.If you have lived through both sides of this, what differences have you noticed? How do you think we can build better bridges between generations of Rails developers?Next in this series: Rails Before Bootcamps — A Tight‑Knit Craft Community"
  },

  {
    "title": "Dusting Off the Blog (Again)",
    "url": "/general/meta/2025/09/08/welcome-to-my-blog/",
    "date": "2025-09-08T12:00:00-05:00",
    "tags": ["blogging","comeback","reflection"],
    "excerpt": "After a long hiatus, I'm bringing this blog back to life. What changed, why I stopped, and what I'm planning to write about this time around.",
    "content": "If you’ve been following this blog for a while (and there might be a few of you), you’ll notice it’s been quiet since 2017. Seven years is a long time in tech. A lot has changed.I used to write regularly about Rails, freelancing, and the Arizona tech scene. Then life happened, priorities shifted, and the blog went dormant.What brought me backA few days ago I went to XORuby in Chicago. First tech event I’d attended in person since probably 2017. I honestly didn’t realize how much I missed it.We talked about _why the lucky stiff, old Ruby legends, and I even mentioned that I once followed a cat named Gorbypuff on Twitter (RIP). It was the kind of conversation that reminded me why I fell in love with the Ruby community in the first place.Sitting there, I realized we’ve all gotten lazy since COVID. It’s too easy to attend meetings online, watch conference videos from our couch, or just skip community stuff altogether. But we’re missing the human interaction. The random conversations. The energy you only get when developers are in the same room geeking out together.After that meetup, I kept thinking: we need to get back to having fun with this stuff. Back to Rails for Zombies-style learning. Back to _why’s talking foxes. Back to the days when Ruby felt like a community of people who genuinely enjoyed building things together.What’s different this timeBack in 2011-2017, I was writing about learning Rails, starting a freelance business, and trying to build a tech community in Phoenix. Those posts are still here (check the archives) - they’re a time capsule of a different era in web development.Now I’m in a different place. Rails is mature. JavaScript has eaten the world. I’ve worked at companies of different sizes, built systems that actually scaled, and learned from mistakes that seemed impossible at the time.What I’m planning to write aboutThis isn’t going to be another “here’s how to build a todo app” blog. I want to focus on the messy, real-world stuff that doesn’t fit neatly into tutorials:  War stories from production - The bugs that kept me up at night and how we fixed them  Technology decisions and their consequences - Why we chose certain tools and what we learned  The human side of development - Team dynamics, code reviews, and technical communication  Honest takes on the JavaScript/React/TypeScript ecosystem - What actually works vs what gets hypeBasically, the kind of content I wish I could have read when I was figuring this stuff out.So I’m starting with this blogThat meetup reminded me that I used to be part of something. Not just using Rails to build apps, but actually participating in the community. Writing. Sharing what I learned. Connecting with other developers.Personal blogs used to be how we did this. Before everything moved to LinkedIn posts and Twitter threads. Before algorithms decided what was worth reading.I miss that version of the web. I miss the version of myself that contributed to it.The community gave me a lot over the years - knowledge, friendships, opportunities. This blog is how I’m starting to give something back.What to expectI’m not committing to a posting schedule. This isn’t a content marketing blog. I’ll write when I have something worth saying.I want to bring back some of that old Ruby community spirit - the curiosity, the willingness to share half-baked ideas, the sense that we’re all figuring this out together.If you’ve been here since the early days, thanks for sticking around. If you’re new, welcome. Either way, I hope you find something useful.The old posts are still here if you want to see how my thinking has evolved (or laugh at my 2011 predictions about the future of web development). But I’m more interested in what comes next.Back to building things.Bob"
  },

  {
    "title": "Making Apps Feel Instant: My Experience with Realtime Rails and Apollo",
    "url": "/react/realtime/2025/02/01/realtime-and-optimistic-ui-with-apollo-and-rails/",
    "date": "2025-02-01T10:00:00-06:00",
    "tags": ["apollo","optimistic-ui","subscriptions","actioncable","anycable","rails"],
    "excerpt": "Lessons learned from building realtime features with Apollo and Rails. When optimistic UI works great, when it doesn't, and why I switched to AnyCable.",
    "content": "I’ve been working on a dashboard app lately that needed to feel snappy. You know the feeling when you click “Save” and nothing happens for a second? That pause where users wonder if they actually clicked the button? I wanted to eliminate that.Turns out, making UIs feel instant isn’t just about making the server faster. It’s about making smart choices about what to show users while they wait.The optimistic UI revelationA few months ago I was building a simple task management feature. Users could create tasks, toggle them complete, delete them. Standard stuff. But every action felt sluggish because users had to wait for the server response before seeing any change.Then I discovered Apollo’s optimistic responses. Game changer.Here’s what made the difference. Instead of waiting for the server, I started showing users what they expected to see immediately:// When someone creates a new task, show it right awayconst [createTask] = useMutation(CREATE_TASK, {  optimisticResponse: ({ input }) =&gt; ({    createTask: {      id: `temp-${Date.now()}`, // temporary ID      title: input.title,      completed: false,      __typename: 'Task'    }  }),  onError: (error) =&gt; {    // Oops, something went wrong - the UI automatically rolls back    console.error('Failed to create task:', error.message);  }});The difference was night and day. Click “Add Task” and boom - it’s there. No waiting. If something goes wrong on the server, Apollo handles rolling back the optimistic change.But I learned the hard way that optimistic UI isn’t magic. It works great for simple actions like creating, toggling, or deleting. But I tried to get too clever with complex forms and nested relationships. That’s where things got messy.When optimistic UI isn’t enoughOptimistic updates work great when you’re the only one changing data. But what about when multiple users are working on the same thing? That’s where I needed real-time subscriptions.I was building a collaborative feature where team members could see each other’s changes live. ActionCable made this surprisingly straightforward with Rails:# In my Rails GraphQL schemaclass Types::SubscriptionType &lt; Types::BaseObject  field :task_updated, Types::TaskType, null: falseend# After updating a task anywhere in the appMySchema.subscriptions.trigger(:task_updated, {}, updated_task)On the client side, I had to set up Apollo to handle both regular HTTP requests and WebSocket subscriptions:// This took me a while to get rightconst wsLink = new GraphQLWsLink(  createClient({ url: 'ws://localhost:3000/cable' }));const splitLink = split(  ({ query }) =&gt; {    const definition = getMainDefinition(query);    return (      definition.kind === 'OperationDefinition' &amp;&amp;      definition.operation === 'subscription'    );  },  wsLink,  httpLink);The magic happened when I subscribed to updates:useSubscription(TASK_UPDATED, {  onData: ({ data }) =&gt; {    // Someone else updated a task - show it immediately    const updatedTask = data.data?.taskUpdated;    // Apollo automatically updates the cache  }});The ActionCable bottleneckEverything worked great in development and with a few users. But when I load-tested with a couple hundred concurrent WebSocket connections, ActionCable started to struggle. Ruby isn’t great at handling tons of concurrent connections.That’s when I discovered AnyCable. It’s a drop-in replacement that offloads WebSocket handling to a Go process while keeping all my Rails business logic intact. The switch was painless - just changed my cable config and started the AnyCable-Go server.The performance difference was dramatic. What used to choke at 200 connections now handled thousands without breaking a sweat.Sometimes simple polling is betterNot everything needs WebSockets. For data that updates occasionally - like user counts or notification badges - I just use Apollo’s polling feature:const { data } = useQuery(GET_NOTIFICATION_COUNT, {  pollInterval: 30000 // Check every 30 seconds});It’s simpler, more reliable, and puts less strain on the server.Lessons learned the hard wayBuilding realtime features taught me a few things:Optimistic UI is great, but have a rollback plan. I spent hours debugging “ghost” items that appeared when mutations failed silently.WebSockets are stateful and fragile. Always handle reconnections gracefully. Users close laptops, switch networks, go through tunnels.Not everything needs to be realtime. I got carried away and made every little thing live. Some data is fine being a few seconds stale.Test with real network conditions. Everything works great on localhost. Try it on a flaky mobile connection.The combination of optimistic UI and selective realtime updates has made my apps feel much more responsive. Users notice the difference immediately. The key is being thoughtful about when to use each technique."
  },

  {
    "title": "The Authentication Dilemma: Sessions vs JWTs in Rails",
    "url": "/security/rails/2025/01/24/auth-in-rails-and-apollo-sessions-vs-jwt/",
    "date": "2025-01-24T10:00:00-06:00",
    "tags": ["authentication","authorization","jwt","sessions","apollo","react","csrf"],
    "excerpt": "Why I usually stick with boring cookie sessions, when I reach for JWTs, and the authentication mistakes that taught me lessons the hard way.",
    "content": "I’ve been building Rails apps for over a decade now, and I’ve probably implemented user authentication about fifty different ways. Most of those attempts were overly complicated. I’ve learned that when it comes to auth, boring usually wins.Last year I was working on a new Rails app with a React frontend. The team immediately started debating: “Should we use JWTs or stick with Rails sessions?” Everyone had strong opinions, most based on blog posts they’d read rather than real experience.Here’s what I’ve learned from actually shipping both approaches.Why I usually stick with sessionsFor most Rails apps I build, I reach for good old cookie-based sessions first. They’re built into Rails, they work with ActionCable out of the box, and I get security features for free.Here’s my typical setup:# config/initializers/session_store.rbRails.application.config.session_store :cookie_store,  key: '_myapp_session',  same_site: :lax,  secure: Rails.env.production?,  httponly: trueThe httponly: true means JavaScript can’t access the session cookie. That’s a good thing - XSS attacks can’t steal it. The same_site: :lax helps prevent CSRF attacks.But here’s the catch with single-page apps: you still need CSRF protection for state-changing requests:# app/controllers/application_controller.rbclass ApplicationController &lt; ActionController::Base  protect_from_forgery with: :exception    def current_user    @current_user ||= User.find(session[:user_id]) if session[:user_id]  endendI expose the CSRF token to my React app through a meta tag:&lt;!-- app/views/layouts/application.html.erb --&gt;&lt;meta name=\"csrf-token\" content=\"&lt;%= form_authenticity_token %&gt;\"&gt;On the Apollo side, I need to include credentials with every request and add the CSRF token:// apollo/client.jsimport { HttpLink } from '@apollo/client';import { setContext } from '@apollo/client/link/context';const httpLink = new HttpLink({   uri: '/graphql',   credentials: 'include' // This sends cookies with every request});const csrfLink = setContext((_, { headers }) =&gt; {  const token = document.querySelector('meta[name=\"csrf-token\"]')?.getAttribute('content');  return {    headers: {      ...headers,      'X-CSRF-Token': token || ''    }  };});export const client = new ApolloClient({  link: from([csrfLink, httpLink]),  cache: new InMemoryCache()});This approach is boring, but it works. The browser handles everything automatically, and I don’t have to worry about token storage or expiration.When I reach for JWTsI only use JWTs when I have a specific need they solve:  Cross-domain requests - My API is on a different domain than my frontend  Mobile apps - Cookies don’t work as nicely in native apps  Multiple services - I need to verify users across different backend servicesBut JWTs come with complexity. Here’s a basic implementation I’ve used:# Gemfilegem 'jwt'# app/services/auth_service.rbclass AuthService  SECRET = Rails.application.credentials.jwt_secret    def self.encode(user_id)    payload = {      sub: user_id,      exp: 2.hours.from_now.to_i    }    JWT.encode(payload, SECRET, 'HS256')  end    def self.decode(token)    payload, = JWT.decode(token, SECRET, true, { algorithm: 'HS256' })    payload['sub']  rescue JWT::DecodeError    nil  endendIn my ApplicationController:class ApplicationController &lt; ActionController::Base  private    def current_user    @current_user ||= find_user_from_token  end    def find_user_from_token    token = request.headers['Authorization']&amp;.split(' ')&amp;.last    return nil unless token        user_id = AuthService.decode(token)    User.find(user_id) if user_id  endendOn the client side, I store the JWT and include it with every request:// apollo/client.jsimport { setContext } from '@apollo/client/link/context';const authLink = setContext((_, { headers }) =&gt; {  const token = localStorage.getItem('authToken');  return {    headers: {      ...headers,      Authorization: token ? `Bearer ${token}` : ''    }  };});export const client = new ApolloClient({  link: from([authLink, httpLink]),  cache: new InMemoryCache()});But here’s where JWTs get tricky…The JWT complexity spiralJWTs seem simple at first, but they get complicated fast. Here are the problems I’ve run into:You can’t revoke them easily. If someone steals a JWT, it’s valid until it expires. With sessions, I can just delete the session from my database.Token refresh is annoying. Short-lived tokens mean you need a refresh mechanism. I’ve built systems with refresh tokens stored as httpOnly cookies, but at that point, why not just use sessions?Storage is tricky. localStorage persists across browser sessions but is vulnerable to XSS. sessionStorage gets cleared when users close tabs. Cookies are back to the same-site restrictions.Clock skew causes weird bugs. If your server and client clocks are off, tokens might be “expired” before they should be.What I actually doFor 90% of the Rails apps I build, I use cookie sessions with CSRF protection. It’s boring, but it works reliably.I only reach for JWTs when I have a genuine cross-domain need or I’m building a native mobile app. And when I do use JWTs, I keep them short-lived (30 minutes max) and implement a proper refresh token system.One mistake that taught me a lessonA few years back, I built a system that stored JWTs in localStorage and made them long-lived (24 hours) to avoid the refresh complexity. A penetration test later revealed that a single XSS vulnerability could steal user tokens for an entire day.I switched back to short-lived tokens with httpOnly refresh cookies. But at that point, I was basically reinventing sessions with extra steps.Authentication doesn’t have to be exciting. Sometimes the boring, well-tested approach is exactly what you need."
  },

  {
    "title": "Why I Generate All My TypeScript Types (And You Should Too)",
    "url": "/react/typescript/2025/01/17/type-safe-react-with-rails-graphql-and-codegen/",
    "date": "2025-01-17T10:00:00-06:00",
    "tags": ["typescript","react","graphql","codegen","ruby-on-rails"],
    "excerpt": "How GraphQL Code Generator saved me from runtime surprises and made my Rails + React apps much more reliable. Plus the gotchas I wish I'd known earlier.",
    "content": "I used to hand-write TypeScript interfaces for all my GraphQL queries. It was tedious, error-prone, and I constantly had mismatches between what my Rails API returned and what my React components expected.Then I discovered GraphQL Code Generator. It’s one of those tools that seems too good to be true until you actually use it.The problem I was trying to solvePicture this: I’d build a feature in Rails, add some fields to a GraphQL type, then spend 20 minutes updating TypeScript interfaces across my React app. Inevitably, I’d miss one. The app would compile fine, but then I’d get Cannot read property 'title' of undefined at runtime.Or worse - I’d refactor a GraphQL field on the server and forget to update the client types. Everything would seem fine until users started hitting errors in production.How GraphQL Code Generator changed everythingInstead of manually maintaining TypeScript types, I let the computer generate them directly from my GraphQL schema and queries. Now when I change a field in Rails, my TypeScript types update automatically.Here’s how I set it up:npm install -D @graphql-codegen/cli @graphql-codegen/typescript \\  @graphql-codegen/typescript-operations @graphql-codegen/typescript-react-apolloI add these scripts to package.json:{  \"scripts\": {    \"codegen\": \"graphql-codegen --config codegen.yml\",    \"codegen:watch\": \"graphql-codegen --config codegen.yml --watch\"  }}The watch mode is crucial - it regenerates types whenever I change a query or the schema changes.My configuration file looks like this:# codegen.ymlschema: http://localhost:3000/graphqldocuments: \"src/**/*.{ts,tsx,graphql}\"generates:  src/graphql/generated.tsx:    plugins:      - typescript      - typescript-operations      - typescript-react-apollo    config:      withHooks: true      scalars:        ISO8601DateTime: string        UUID: stringThis tells codegen to:  Fetch the schema from my Rails dev server  Find all GraphQL queries/mutations in my React code  Generate TypeScript types and React hooksPro tip: For CI builds, I generate a schema file from Rails and point to that instead of hitting the dev server:# In Railsbundle exec rake graphql:schema:dump# Then use schema: schema.graphql in codegen.ymlThe magic happens when you write queriesI write my GraphQL queries in separate .graphql files:# src/queries/users.graphqlquery GetUsers($first: Int) {  users(first: $first) {    nodes {      id      email      name      createdAt    }  }}When I run npm run codegen, it generates a TypeScript hook that knows exactly what this query returns:import { useGetUsersQuery } from '../graphql/generated';export function UserList() {  const { data, loading, error } = useGetUsersQuery({     variables: { first: 10 }   });  if (loading) return &lt;div&gt;Loading...&lt;/div&gt;;  if (error) return &lt;div&gt;Error: {error.message}&lt;/div&gt;;  return (    &lt;ul&gt;      {data?.users.nodes.map(user =&gt; (        &lt;li key={user.id}&gt;          {user.name} - {user.email}          {/* TypeScript knows these fields exist! */}        &lt;/li&gt;      ))}    &lt;/ul&gt;  );}The best part? If I typo a field name or try to access something that doesn’t exist, TypeScript catches it at compile time.The nullability challengeHere’s something that tripped me up early: GraphQL is very explicit about what can be null. If you mark a field as nullable in your Rails schema, TypeScript will reflect that.This means you end up with code like:// Lots of optional chainingconst userName = data?.user?.profile?.name;I learned to be deliberate about nullability in my Rails GraphQL types. If a field should always exist, I mark it null: false:# In Rails GraphQL typefield :email, String, null: falsefield :name, String, null: true # This one can be blankFor the few cases where I need to filter out nulls on the client side, I use type guards:const validUsers = data?.users.nodes  .filter((user): user is NonNullable&lt;typeof user&gt; =&gt; Boolean(user));Custom scalars made easyRails has some types that don’t exist in JavaScript - like UUIDs and ISO8601 dates. I map these to string types in my codegen config:scalars:  UUID: string  ISO8601DateTime: stringFor extra type safety, I sometimes create “branded” types:type UserId = string &amp; { readonly __brand: 'UserId' };type ISO8601Date = string &amp; { readonly __brand: 'ISO8601Date' };This prevents me from accidentally passing a regular string where I expect a UUID.Fragments keep me organizedWhen the same data appears in multiple queries, I use GraphQL fragments:# fragments/UserCard.graphqlfragment UserCard on User {  id  name  email  avatarUrl}# queries/dashboard.graphqlquery DashboardData {  currentUser { ...UserCard }  recentUsers { nodes { ...UserCard } }}Codegen generates TypeScript types for fragments too, so I can reuse them in components:import { UserCardFragment } from '../graphql/generated';function UserCard({ user }: { user: UserCardFragment }) {  return (    &lt;div&gt;      &lt;img src={user.avatarUrl} alt={user.name} /&gt;      &lt;h3&gt;{user.name}&lt;/h3&gt;      &lt;p&gt;{user.email}&lt;/p&gt;    &lt;/div&gt;  );}What I learned the hard wayGenerated types aren’t magic. They only reflect what your schema says, not what your server actually returns. I still validate important data at runtime and handle network errors gracefully.Keep your queries co-located. I put GraphQL queries in the same directory as the components that use them. It makes refactoring much easier.Run codegen in watch mode during development. I have npm run codegen:watch running alongside my dev server. When I change a query, types update instantly.Commit the generated files. I used to gitignore the generated types, but that created problems in CI. Now I commit them and my build process validates they’re up to date.The payoffGraphQL Code Generator eliminated an entire class of bugs from my apps. I catch schema mismatches at compile time instead of in production. Refactoring became fearless - if I change a field in Rails, TypeScript tells me exactly which components need updating.It took about a day to set up the first time, but it’s saved me weeks of debugging over the past year. If you’re using GraphQL with TypeScript, this is a no-brainer."
  },

  {
    "title": "My Journey Building a GraphQL API with Rails and Apollo",
    "url": "/rails/graphql/2025/01/10/production-rails-graphql-with-apollo-and-typescript/",
    "date": "2025-01-10T10:00:00-06:00",
    "tags": ["ruby-on-rails","graphql","apollo","typescript","fullstack","performance"],
    "excerpt": "What I learned building a GraphQL API that actually works in production. The mistakes I made, the tools that saved me, and why I'd choose this stack again.",
    "content": "Last year I convinced my team to try GraphQL for our new Rails API. “It’ll be great,” I said. “The frontend can request exactly the data it needs.”Six months later, we had a working GraphQL API serving a React/TypeScript app in production. But getting there taught me more about GraphQL than any tutorial ever did.Why we chose GraphQL (and why we almost regretted it)Our Rails API was growing messy. We had endpoints like /api/users, /api/users/:id/posts, /api/users/:id/posts/:id/comments. Each one returned slightly different data depending on what the frontend needed.GraphQL promised to fix this. One endpoint, flexible queries, better developer experience. It delivered on those promises, but not without some pain.The good: Our React components could request exactly what they needed. No more over-fetching user avatars for list views or under-fetching when we needed detailed profiles.The challenging: GraphQL has more moving parts than REST. Schema design matters. Caching is different. N+1 queries are easy to introduce and hard to spot.Getting started with graphql-rubyThe Rails setup was straightforward. I added the gem and ran the generator:# Gemfilegem 'graphql'gem 'graphiql-rails', group: :development # GraphQL IDEbundle installrails generate graphql:installThis created the basic structure I needed. My first GraphQL type looked like this:# app/graphql/types/user_type.rbmodule Types  class UserType &lt; Types::BaseObject    field :id, ID, null: false    field :email, String, null: false    field :name, String, null: true    field :created_at, GraphQL::Types::ISO8601DateTime, null: false  endendSimple enough. Then I created a query to fetch users:# app/graphql/types/query_type.rbmodule Types  class QueryType &lt; Types::BaseObject    field :users, [Types::UserType], null: false        def users      User.all    end  endendThat User.all would come back to haunt me, but it worked for the demo.The N+1 problem hit us hardOur first production GraphQL queries were slow. Really slow. A simple query to fetch users and their post counts was taking 2+ seconds.The problem was classic N+1 queries. For every user, Rails was making a separate query to count their posts:SELECT * FROM users;SELECT COUNT(*) FROM posts WHERE user_id = 1;SELECT COUNT(*) FROM posts WHERE user_id = 2;-- ... and so onI learned about GraphQL::Dataloader the hard way. It batches database queries automatically:# app/graphql/types/user_type.rbclass UserType &lt; Types::BaseObject  field :posts_count, Integer, null: false    def posts_count    # This batches queries across all users in the request    dataloader.with(Sources::AssociationCount, :posts).load(object)  endend# app/graphql/sources/association_count.rbclass Sources::AssociationCount &lt; GraphQL::Dataloader::Source  def initialize(association_name)    @association_name = association_name  end    def fetch(objects)    # Batch count queries for all objects at once    counts = @association_name.to_s.classify.constantize             .where(\"#{@association_name.to_s.singularize}_id\": objects.map(&amp;:id))             .group(\"#{@association_name.to_s.singularize}_id\")             .count        objects.map { |obj| counts[obj.id] || 0 }  endendThat 2-second query dropped to 200ms.Error handling that doesn’t leak secretsEarly on, our GraphQL errors exposed too much. A failed database query would return the raw SQL error to the client.I learned to be careful about what errors reach users:# app/graphql/my_schema.rbclass MySchema &lt; GraphQL::Schema  rescue_from ActiveRecord::RecordNotFound do |err, obj, args, ctx, field|    raise GraphQL::ExecutionError, \"Not found\"  end    rescue_from ActiveRecord::RecordInvalid do |err, obj, args, ctx, field|    # Log the real error for debugging    Rails.logger.error \"GraphQL validation error: #{err.message}\"    raise GraphQL::ExecutionError, \"Invalid input\"  endendFor authorization, I integrated Pundit:def users  # Only return users the current user can see  Pundit.policy_scope(context[:current_user], User)endPagination without the headachesOur user list grew to thousands of records. Loading them all at once killed the browser.GraphQL’s cursor-based pagination (Relay-style) was confusing at first, but it’s much better than offset pagination for real-time data:# app/graphql/types/query_type.rbfield :users, Types::UserType.connection_type, null: falsedef users  User.order(:created_at)endOn the client side, Apollo handles most of the complexity:query GetUsers($first: Int, $after: String) {  users(first: $first, after: $after) {    edges {      node {        id        name        email      }    }    pageInfo {      hasNextPage      endCursor    }  }}The edges and nodes structure felt weird at first, but it’s consistent and works well with Apollo’s caching.The Apollo Client setup that actually worksOn the frontend, I needed Apollo Client to talk to my Rails GraphQL endpoint. The basic setup was straightforward:npm install @apollo/client graphqlBut the configuration took some trial and error:// apollo/client.tsimport { ApolloClient, InMemoryCache, HttpLink, from } from '@apollo/client';import { onError } from '@apollo/client/link/error';const httpLink = new HttpLink({   uri: '/graphql',   credentials: 'include' // Important for Rails sessions});const errorLink = onError(({ graphQLErrors, networkError }) =&gt; {  if (graphQLErrors) {    graphQLErrors.forEach(error =&gt; {      console.error('GraphQL error:', error.message);    });  }  if (networkError) {    console.error('Network error:', networkError);  }});export const client = new ApolloClient({  link: from([errorLink, httpLink]),  cache: new InMemoryCache({    typePolicies: {      Query: {        fields: {          users: {            // This merges paginated results            merge(existing = { edges: [] }, incoming) {              return {                ...incoming,                edges: [...existing.edges, ...incoming.edges]              };            }          }        }      }    }  })});The typePolicies configuration was crucial for pagination to work correctly. Without it, Apollo would replace the entire list instead of appending new items.TypeScript integration that saves your sanityI wrote about GraphQL Code Generator in detail in another post, but it’s worth mentioning here because it transformed how I work with GraphQL.Instead of manually writing TypeScript interfaces that drift out of sync with my schema, I generate them automatically from my GraphQL queries. It caught so many bugs before they reached production.What I learned about cachingApollo’s cache is powerful but requires understanding. The key insight: it normalizes data by id fields automatically. So this query:query {  user(id: \"1\") { id name email }  users { nodes { id name email } }}Only stores each user once in the cache. Update the user in one place, and it updates everywhere.But mutations need help. After creating a user, I had to tell Apollo to update the cache:const [createUser] = useMutation(CREATE_USER, {  update(cache, { data }) {    cache.modify({      fields: {        users(existing = { edges: [] }) {          const newEdge = {            __typename: 'UserEdge',            node: data?.createUser?.user          };          return {            ...existing,            edges: [newEdge, ...existing.edges]          };        }      }    });  }});Production lessonsRate limiting is essential. GraphQL queries can be expensive. I use Rack::Attack to limit query complexity and request rates.Monitor query performance. I log slow GraphQL queries just like slow SQL queries. Some client queries are accidentally expensive.Start simple. I didn’t need subscriptions or persisted queries on day one. I added them when the use case was clear.GraphQL with Rails and Apollo has been worth the learning curve. The developer experience is genuinely better than REST for complex UIs. But it’s not magic - you still need to think about performance, caching, and security.Would I choose this stack again? Absolutely. But next time I’d spend more time up front on monitoring and performance tooling."
  },

  {
    "title": "JavaScript Fatigue is Real (But It's Worth It)",
    "url": "/javascript/development/2024/01/22/modern-javascript-development/",
    "date": "2024-01-22T15:30:00-06:00",
    "tags": ["javascript","tools","best-practices","modern-development"],
    "excerpt": "My love-hate relationship with the JavaScript ecosystem. How I learned to stop worrying and embrace the chaos of modern JS development.",
    "content": "I’ve been writing JavaScript for over 15 years. I remember when jQuery was revolutionary, when adding onclick handlers directly in HTML was normal, and when the biggest decision was whether to minify your one JavaScript file.Now I have webpack configs, TypeScript compilers, ESLint rules, Prettier configs, and three different package managers to choose from. Some days I miss the simplicity of the old days.But then I remember what it was like to debug IE6 compatibility issues and I appreciate how far we’ve come.The bundler evolutionI started with manually including &lt;script&gt; tags in order. Then came task runners like Grunt and Gulp. Then webpack changed everything.Webpack was powerful but complicated. I spent more time configuring it than writing actual code. The config files grew into monsters:// webpack.config.js (the horror)module.exports = {  entry: './src/index.js',  module: {    rules: [      { test: /\\.js$/, use: 'babel-loader' },      { test: /\\.css$/, use: ['style-loader', 'css-loader'] },      // ... 20 more rules    ]  },  plugins: [    // ... 15 plugins  ],  // ... 100 more lines};Then Vite came along and made me happy again:// vite.config.js (the relief)export default {  // That's it. It just works.};Vite’s dev server is blazing fast. Hot module replacement actually works. I can focus on building features instead of fighting build tools.My current stack: Vite for new projects, webpack only when I’m stuck with legacy code.The package manager warsI lived through the npm vs Yarn wars. Yarn was faster and had better lockfiles when it launched. Then npm caught up. Then pnpm showed up promising to save disk space.Honestly? They’re all fine now. I use npm because it’s everywhere, but I won’t fight you if you prefer Yarn or pnpm.What I will fight you on: commit your lockfiles. package-lock.json is not optional. I’ve debugged too many “works on my machine” issues caused by different dependency versions.# My typical workflownpm install        # Install dependenciesnpm run dev        # Start developmentnpm run build      # Build for productionnpm test           # Run testsKeep it simple.Code quality tools that actually helpI used to think linters were annoying. Then I worked on a team where everyone had different coding styles. Debugging became a nightmare because I couldn’t recognize patterns in unfamiliar formatting.Now I’m a believer in automated code quality:ESLint catches bugs before they happen:// .eslintrc.js - my basic setupmodule.exports = {  extends: ['eslint:recommended'],  rules: {    'no-unused-vars': 'error',    'no-console': 'warn',    'prefer-const': 'error'  }};Prettier ends formatting debates:{  \"semi\": true,  \"singleQuote\": true,  \"trailingComma\": \"es5\"}I run both on save in my editor and in pre-commit hooks. No more arguing about semicolons or tabs vs spaces.TypeScript changed my lifeI resisted TypeScript for years. “I don’t need types,” I said. “JavaScript is fine.”Then I joined a team with a large TypeScript codebase. The developer experience was incredible. My editor knew exactly what properties every object had. Refactoring was fearless. Runtime errors dropped dramatically.// Before: hoping this object has the right shapefunction formatUser(user) {  return `${user.name} (${user.email})`; // 🤞}// After: knowing exactly what I'm working withinterface User {  id: number;  name: string;  email: string;}function formatUser(user: User): string {  return `${user.name} (${user.email})`; // ✨}The initial setup cost is worth it. Start new projects with TypeScript. Gradually migrate existing ones.Pro tip: Don’t go crazy with complex types at first. any is okay while you’re learning. Better to have some type safety than none.Modern JavaScript is actually goodRemember when we had to do this?// The bad old daysvar name = user.name;var email = user.email;var users = data.map(function(item) {  return Object.assign({}, item, { active: true });});var message = 'Welcome, ' + user.name + '!';var city = user &amp;&amp; user.address &amp;&amp; user.address.city;Now we can write:// Modern JavaScript is beautifulconst { name, email } = user;const users = data.map(item =&gt; ({ ...item, active: true }));const message = `Welcome, ${name}!`;const city = user?.address?.city;Optional chaining (?.) alone has saved me from so many “Cannot read property of undefined” errors.Don’t be afraid to use modern features. Browsers support them, and if you need to support old browsers, your bundler can transpile them.Testing: from zero to heroI used to be that developer who tested in the browser by clicking around. “If it works when I try it, it’s good to ship.”That approach doesn’t scale. One too many production bugs taught me the value of automated testing:// Jest makes testing almost pleasantdescribe('formatUser', () =&gt; {  it('formats user name and email', () =&gt; {    const user = { id: 1, name: 'John', email: 'john@example.com' };    expect(formatUser(user)).toBe('John (john@example.com)');  });  it('handles missing email gracefully', () =&gt; {    const user = { id: 1, name: 'John', email: null };    expect(formatUser(user)).toBe('John (no email)');  });});My testing philosophy:  Test the happy path  Test edge cases that have bitten you before  Don’t test implementation details  Write tests that make refactoring saferStart small. A few key tests are better than none.Framework fatigue is realI’ve used jQuery, Backbone, Angular (1.x), React, Vue, Svelte, and probably a few others I’ve forgotten.Each framework promised to solve all my problems. Each had its own way of doing things. Each had its own ecosystem to learn.Here’s what I’ve learned:React - Great ecosystem, steep learning curve, lots of boilerplate. Good for teams that can invest in learning it properly.Vue - More approachable than React, good documentation, smaller ecosystem. Great for smaller teams or solo projects.Svelte - Interesting approach, smaller bundles, less mature ecosystem. Worth watching but I haven’t used it in production.My advice: Pick one and stick with it for a while. Framework-hopping is expensive. Most frameworks can build most apps. The team’s familiarity matters more than the framework’s features.Currently betting on React because that’s where the jobs are, but Vue makes me happier.Performance lessons learned the hard wayI once shipped a React app that took 30 seconds to load on 3G. The bundle was 5MB. Oops.That taught me to care about performance from day one:Code splitting saves lives:// Load heavy components only when neededconst Dashboard = lazy(() =&gt; import('./Dashboard'));const Reports = lazy(() =&gt; import('./Reports'));// Route-based splittingconst routes = [  { path: '/dashboard', component: Dashboard },  { path: '/reports', component: Reports }];Bundle analysis is essential:# See what's making your bundle fatnpx webpack-bundle-analyzer dist/static/js/*.jsI was shocked to discover that moment.js was 67KB and I was only using it to format one date. Switched to date-fns and saved 60KB.Performance budget: I set a target bundle size (&lt; 1MB total) and fail builds that exceed it. Prevents performance regression.The JavaScript ecosystem will keep changingNew frameworks launch every week. Build tools promise to be 10x faster. Package managers claim to solve all problems.I’ve learned to be selective about what new things I adopt:Before jumping on trends, I ask:  Does this solve a real problem I have?  Is it mature enough for production use?  Will my team be able to learn and maintain it?  What’s the migration path if it doesn’t work out?Current bets I’m making:  TypeScript is here to stay  Vite will continue eating webpack’s lunch  React will remain dominant for a while  Edge computing will become more importantThings I’m watching but not betting on yet:  WebAssembly for frontend apps  Micro-frontends (seems like premature optimization for most apps)  The next “React killer” frameworkThe JavaScript ecosystem is exhausting but also exciting. New tools genuinely make development better, even if the pace of change is overwhelming.My advice: focus on fundamentals (code quality, testing, performance), pick a stable stack you can be productive with, and upgrade incrementally when you have clear benefits.The tools will keep changing. The principles stay the same."
  },

  {
    "title": "Using Braintree hosted fields with Ruby on Rails",
    "url": "/2017/rails-with-braintree-hosted-fields/",
    "date": "2017-09-26T19:00:00-05:00",
    "tags": ["rails","ruby","braintree","payments","tutorial"],
    "excerpt": "  Archived from the original post (2017-09-27). Lightly converted to Markdown; links and examples preserved where possible.",
    "content": "  Archived from the original post (2017-09-27). Lightly converted to Markdown; links and examples preserved where possible.While it is possible to create your own credit card process in a Ruby on Rails app, due to the PCI compliance rules, it is just safer to use something like Stripe or Braintree.I have used Stripe before and it is very easy to set up and use. Stripe now has elements which can be used to create a custom credit card form that can be styled to look exactly like your app.Previous to this, the dropin solutions were good but just did not look like the rest of the application.After reading up a bit, I decided that I wanted to try out Braintree hosted fields.Below is the finished form that I created. I wanted to be able to get more user information at the same time as charging the credit card.TL/DRFor the app that I made for this tutorial, it is at https://github.com/brobertsaz/rails_braintree_hosted_fieldsBraintree SetupFirst thing that you need to do is head on over to Braintree and sign up for sandbox account.  Don’t worry, it’s free.After you sign up you will need to copy this info:Braintree::Configuration.environment = :sandboxBraintree::Configuration.merchant_id = 'qwertyqwerty'Braintree::Configuration.public_key = 'qwertyqwerty'Braintree::Configuration.private_key = 'qwertyqwertyqwerty'Next, create a braintree.rb file in config/initializers/ directory and add these environment variables:Braintree::Configuration.environment = :sandboxBraintree::Configuration.logger = Logger.new('log/braintree.log')Braintree::Configuration.merchant_id = ENV['BRAINTREE_MERCHANT_ID']Braintree::Configuration.public_key = ENV['BRAINTREE_PUBLIC_KEY']Braintree::Configuration.private_key = ENV['BRAINTREE_PRIVATE_KEY']In order to use these environment variables, we will use the Figaro gem. Add to Gemfile:gem 'figaro'You will need to run bundle to install figaro and then bundle exec figaro install to install it. This will create a new file config/application.yml. This is where you will set your keys for Braintree.# Braintree configuration keysBRAINTREE_MERCHANT_ID: ''BRAINTREE_PUBLIC_KEY: ''BRAINTREE_PRIVATE_KEY: ''Make sure that you add config/application.yml to your .gitignore file as this holds all of your Braintree keys.Lastly, add the Braintree Ruby gem to your Gemfile,gem 'braintree', '~&gt; 2.77'and make sure that you run bundle to install it.Note: If you are in newer version of Rails, jQuery is no longer included automatically so you will need to addgem 'jquery-rails'to your Gemfile, and run bundle to install it.Customers SetupFor the checkout form that I wanted to use, I needed a Customer that would be saved to the database.rails g model CustomersNow open up the db/migrate/new-migration-file and we will add our fieldsclass CreateCustomers &lt; ActiveRecord::Migration[5.1]  def change    create_table :customers do |t|      t.string :first_name      t.string :last_name      t.string :email      t.string :phone      t.string :address_1      t.string :address_2      t.string :city      t.string :state      t.string :zipcode      t.integer :braintree_customer_id      t.datetime :last_visit      t.timestamps null: false    end  endendWe will use the braintree_customer_id so that in the future if we make a charge for that same customer, we can access the save data.As we created the model for Customer, we can create a new customer without having to create a Customer controller. This will be done in our Checkouts controller. Let’s create that now. Create new file at app/controllers/checkouts_controller.rb and add the following:class CheckoutsController &lt; ApplicationController  def new    @customer = Customer.new    @client_token = Braintree::ClientToken.generate  end  private  def customer_params    params.require(:customer).permit(:first_name, :last_name, :address_1, :address_2, :city, :state, :zipcode, :email, :phone)  endendIn the new method, we are creating a new customer that we will use in the checkout form. We also need to create a @client_token using the built in Braintree function Braintree::ClientToken.generate and we added the strong parameters which we will use later.Now, let’s make sure that we have our routes setup correctly.Rails.application.routes.draw do  resources :customers  root 'checkouts#new'  resources :checkouts,  only: [:new, :create, :show]endWe are going to route our app to checkouts#new which will take us to the views/checkouts/new.html.erb so lets create that file now.There are two parts to the new view; there is the HTML markup for the form and the Javascript section that is used by Braintree to create a iframe for the credit card information.For the sake of the demo, I just used Bootstrap CDN link in the view itself. I also used the simple_form ruby gem. Add the gem 'simple_form' to Gemfile and run bundle. Then you will need to run rails generate simple_form:install --bootstrap to install simple_form.Form setupHTML — add the following to the views/checkouts/new.html.erb:&lt;link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;...&lt;div class=\"panel panel-default bootstrap-basic\"&gt;  &lt;div class=\"panel-heading\"&gt;    &lt;h3 class=\"panel-title\"&gt;Enter Card Details&lt;/h3&gt;  &lt;/div&gt;  &lt;div class=\"panel-body\"&gt;    &lt;%= simple_form_for @customer, url: {action: 'create'}, method: 'post' do |f| %&gt;      ... inputs ...    &lt;% end %&gt;  &lt;/div&gt;&lt;/div&gt;Javascript — add to the same view:&lt;script src=\"https://js.braintreegateway.com/js/beta/braintree-hosted-fields-beta.16.min.js\"&gt;&lt;/script&gt;&lt;script id=\"braintree-client-token\" type=\"application/json\"&gt;&lt;%= @client_token %&gt;&lt;/script&gt;&lt;script&gt;var clientToken = document.getElementById('braintree-client-token').innerHTML;braintree.setup(clientToken, 'custom', {  id: 'new_customer',  hostedFields: {    styles: {},    number: { selector: '#credit-card-field', placeholder: '4111 1111 1111 1111' },    cvv: { selector: '#security-code-field', placeholder: '123' },    expirationDate: { selector: '#expiration-field', placeholder: 'MM/YYYY' },    postalCode: { selector: '#postal-code-field', placeholder: '12345' }  }});&lt;/script&gt;TransactionWhen we submit the form it will go to the checkouts#create method. When this happens, the Braintree form will create a nonce which is basically a tokenized string that contains the credit card data. This data is encrypted when it is sent to the backend and will be decrypted by Braintree on their side.Let’s start to add the create method in controllers/checkouts_controller.rb:  def create    amount = params[\"amount\"] ||= 200    nonce = params[\"payment_method_nonce\"]    result = Braintree::Transaction.sale(      amount: amount,      payment_method_nonce: nonce,    )  endNow the full create method:  def create    amount = params[\"amount\"] ||= 200    nonce = params[\"payment_method_nonce\"]    result = Braintree::Transaction.sale(      amount: amount,      payment_method_nonce: nonce,      customer: {        first_name: customer_params[:first_name],        last_name: customer_params[:last_name],        email: customer_params[:email],        phone: customer_params[:phone]      },      options: { store_in_vault: true }    )    if result.success? || result.transaction      @customer = Customer.create customer_params      @customer.braintree_customer_id = result.transaction.customer_details.id      @customer.save      redirect_to checkout_path(result.transaction.id)    else      error_messages = result.errors.map { |error| \"Error: #{error.code}: #{error.message}\" }      flash[:error] = error_messages      redirect_to new_checkout_path    end  endThanks — helpful resources:  https://www.sitepoint.com/integrate-braintree-payments-rails/  https://github.com/braintree/braintree_rails_example  https://developers.braintreepayments.com/start/example-integrations  https://developers.braintreepayments.com/guides/hosted-fields/overview/javascript/v3Demo App: https://github.com/brobertsaz/rails_braintree_hosted_fieldsFeedback: If I missed something or made any errors, please let me know so that I can get this updated."
  },

  {
    "title": "What Operation Code means to me.",
    "url": "/2017/what-oc-means-to-me/",
    "date": "2017-09-24T19:00:00-05:00",
    "tags": ["workflow","community","veterans"],
    "excerpt": "  Archived from the original post (2017-09-25). Lightly converted to Markdown.",
    "content": "  Archived from the original post (2017-09-25). Lightly converted to Markdown.A few months back I was on Twitter looking for a place to volunteer to mentor people learning Ruby on Rails. I had not heard of Operation Code until somebody suggested it to me.I was in the Army for 6 years in the 80’s. My unit went to Desert Storm a couple of months after I go out. I almost went back in a couple of times. It was hard for me to transition back to the civilian life after the Army. You take so much for granted when you are in the service. There is no worry of cutbacks or layoffs. There is no worry about whether your paycheck will be there for payday or not. No worry of health insurance. Just do your job and life is good.I bounced around a bit after the Army, trying to find a good career. That did not come for many years…I started learning programming almost 20 years after getting out. I knew people that we retiring from the Army and I was still trying to get that career that would make me happy.In 2009 there were not a lot of resources for learning programming like there is now. I did not have the time nor the money to go to a school for programming and there were not that many places available at that time. I luckily found a mentor that became a friend that became a business partner.What drew me to Ruby on Rails was the community. That was something that I had missed from the days in the military. The friendships, the camaraderie and the unity.Finding Operation Code was a blessing. I found other vets, active duty and military family members that were all there for one of two things. To learn programming or to help others to learn programming. I had no idea of all of the resources that were available to vets until I joined OC.When I got my first mentee I was so happy.  Then I got my second. They are both super smart people that really do not need a lot of help at all. I think it is more of the fact that they have somebody that they can talk to if need be. What if I am not online? There are 100’s of others that are there to help and answer questions.Total strangers that will jump on a screen share just to help out somebody with questions. There are no charges and no fees. OC is just one great big group of people that are there for one another.What does Operation Code mean to me? Friends, family and a place that feels like home for this vet.If you love your freedom, thank a vet. If you really love your freedom, then help a vet become a programmer."
  },

  {
    "title": "Blogging Mondays Premier",
    "url": "/2017/blogging-mondays/",
    "date": "2017-09-17T19:00:00-05:00",
    "tags": ["workflow","writing"],
    "excerpt": "  Archived from the original post (2017-09-18). Lightly converted to Markdown.",
    "content": "  Archived from the original post (2017-09-18). Lightly converted to Markdown.Welcome the the very first Operation Code Blogging Mondays event for September 2017.In an effort to help people get motivated about writing blog posts, Blogging Mondays was created.  Each month, there will be a different host and a different topic.To participate:  To participate, write a blog post!  Although recommended, the post does not have to be on topic.  Please set article to go live the day of the event, preferably, at 0000 hours  Blog post should mention Blogging Mondays  There should be a link back to the invitation post  Somehow add your post to a list somewhere so the host can add you to the event summary  Don’t forget to post your article link in #bloggingThis months Topic is “Why I joined Operation Code”I feel that this is a easy topic for us to start off with.  It is also something that we all should (better not) have any issues coming up with something to write.Some possible ideas:  What did you expect from OC?  What do you love about OC?  Why you joined?Remember that this is for fun and you do NOT have to wite about the topic if you do not want to.It will be exciting to read all of the posts after they are done!!Let’s start blogging!"
  },

  {
    "title": "Not all recruiters are evil",
    "url": "/2017/recruiters-are-not-all-evil/",
    "date": "2017-06-09T19:00:00-05:00",
    "tags": ["workflow","career"],
    "excerpt": "  Archived from the original post (2017-06-10). Lightly converted to Markdown.",
    "content": "  Archived from the original post (2017-06-10). Lightly converted to Markdown.One of the most common topics I see, is about recruiters. Most are complaints about bad ones, and some are compliments of good ones.I know a LOT of great people that are great recruiters. I also know that more people take the time to write a complaint than people do to write a compliment.It must be a difficult job that they have to do day after day. They work for people that are hiring, they work for people looking to get hired, and the work for both. It must be a balancing act for them; doing a good job for the employer AND for the candidate at the same time. It must be like when a couple gets divorced and use the same attorney. Who’s best interest do they have? Hopefully both.LinkedIn has become a prime location for recruiters to find candidates. The good recruiters take the time to look at your profile before contacting you. They send a message apologizing for contacting you and ask if you are in the market. They do not bother you or pester you. The ones that contact you outside of LinkedIn say they are sorry for the interruption and ask if you are interested in a position that they are filling. They use your name in the email and not “Dear first_name.” They do not email you repeatedly. They do their job. They are the ones that we don’t talk about. They are the ones that don’t annoy us. They are not evil. The bad ones on the other hand …The bad ones are the evil ones. They are the ones that give recruiters a bad name. They are the ones that we do talk about. We do not like them. They are annoying, they treat you like crap. They play the numbers game; email everybody on the planet and some will reply. They will email you for things that you are not qualified for. They will ask if you want to relocate for a 6 month gig. They paste job descriptions into emails and ask you to fill in the blanks. They email you several times and do not pay attention to when you are nice enough to reply and say that you are not interested.If you decide to use a recruiter, that is great. If you are actively looking for work, you SHOULD use a recruiter. When you buy or sell your house, you normally use a Realtor. Let the recruiters do the job searching for you. Let them help you find your next job. Why? Because they know the companies that are hiring. They know where there are jobs. They know what kind of salary you can expect to get. They can tell you the pros and cons of companies that they have worked with before. They have a working relationship with the people that are doing the interviewing/hiring.That being said, there are certain things (in my opinion; after all, this is all my opinion) that should not be done by recruiters and there is a specific order in which the interview process should be done. They will and should ‘qualify’ you to see what roles you would be good in. This is a good thing. They do not want to waste time trying to place you into a position for which you do not qualify. Once they know who you are, what you want and what you can do, they have all of the information they need to start the hunt for your next position.Once they find a match, they should set you up with an initial conversation with prospective employer. This MUST be the first thing. Not calling references, or coding challenges or any test of any kind. They must NOT waste your time BEFORE you get to talk to somebody with the possible future employer. That initial call is like a first date. That first date is where you see if you are a match and like each other. You need to see if you WANT to go to work there and they need to see if they WANT you to go to work there. The worst question that I have ever gotten on the initial conversation is “why do you want to work for us?” to which I always reply with “why should I work for you?” You need to talk a bit so that you can decide if it is a place that you want to work for.If the initial conversation with the prospective employer goes well, then it is appropriate for them to ask you to do some SMALL things to prove that you are capable of performing the position for which they are hiring. Calling references at this point is also appropriate. Do your due diligence and check out the employer. Glassdoor has employee reviews of a ton of companies. Just bear in mind that the reviews are like the comments about recruiters; more people take the time to complain than to compliment.Remember that your recruiter wants to help you find a new job. Most agencies that I know of, have a 3 to 6 month retention period (not sure what they call it) where they only get full commission if you get placed and STAY there for the minimum duration.Good recruiters, keep up the great work!!Evil recruiters, find another career path ;)"
  },

  {
    "title": "Q and A with me",
    "url": "/2017/q-and-a/",
    "date": "2017-05-31T19:00:00-05:00",
    "tags": ["workflow","career"],
    "excerpt": "  Archived from the original post (2017-06-01). Lightly converted to Markdown.",
    "content": "  Archived from the original post (2017-06-01). Lightly converted to Markdown.I have recently been searching for a new developer job, and in the process, I have had a few questionnaire’s to fill out.  So I thought that I would share them as a way to get to know me better.How interested are you in learning new application stacks or languages?I have already recognized that I need to add new languages and skills to keep up with the advancements in web development. I do spend some time studying/ learning things on my own time. I love Angular and I have been learning Angular 2/4 recently. I also started a CS101 (I am self taught with no college) which is taught using Python which was my first programming language and I have been enjoying getting to use it again. I would say that I am pretty interested in learning new things and just wish I had more time to do so.What are your long term career goals?I always fear this question. I feel as though I have missed out on opportunities because of how I answer it. The most enjoyable role that I had as at a startup that I worked at until they ran out of funding. I was able to build my own team and manage it. This, I think, would be my dream role. That being said, I am fully capable of being a team member. I do love mentoring new developers. I have been directly responsible for bringing a few people into the web development world.  As for long term, I am looking for a place to stay.  I really thought that I had this at at the startup I was at but that was not the case. I am not one to change jobs and would not be looking now if it were not for my contract expiring.Are there any topics in computer science you have been or would like to research?As stated above, am self-taught so I would have to say that I am interested in all of them!In your ideal work flow how much time would you prefer to spend on maintenance activities vs new development?Interesting question.  In my opinion applications never seem to get to the ‘refactor phase’ as they are continually being updated.  There is no question of the value that comes from refactoring but it is always the last thing that is focused on. I would honestly have to say that I think a solid 20% of the time would be ideal for refactoring.Given limited or ambiguous specifications how do you typically gather information?I have recently coined the term PDD or prayer driven development. When that does not work, I prefer direct contact. Emails are the last resort as we are inundated with too many emails daily. Slack is my favorite go to for messaging. If after a couple of messages the specifications are not clear, then it’s time for a phone call and/or screen share. Many times it is easier for people to relate something to you if they can ‘show’ you what they mean.Given a large number of mutually exclusive tasks how would you prioritize them?I guess this would depend on the business needs. Those are the priorities first and foremost. After that I usually try to look at all of the tasks and prioritize them in a logical manner. If they are all relatively equal, I would probably do the quickest tasks first and get them out of the way.What is your strategy to learn unfamiliar skills in a time effective manner?Repetition is the best way for me to do this.How do you typically assess the viability of your solution to a design problem?In a world of TDD, I will still answer this with by smoke testing the problem. If it is a UI related thing I might just make changes in the browser dev tools to see if the solution works.Would you be willing to abandon a solution you have spent significant time on? If so how do you determine when to abandon the solution?I have had to trash what I was working on and started over before. Deciding when to do that is not easy. You have to take into account the amount of time spent already, and what it would take to change directions. We (we pair program at at my current position) currently have been upgrading Angular 1.3 to Angular 1.6. This resulted in having to change the multi select dropdowns. We ended up trying to use three different libraries before finding the right one. When did we know to try a different one?  When the one we were trying would not work for all of our needs.How would you account for feature breaking changes in a specification after the functionality has been written and tested?This is one of the biggest issues, in my opinion, in software development. Object oriented programming is the key to limiting the chances of this happening.  We are currently reading Sandi Metz’s 99 bottles of OOP. There is no way for us as developers to guess what the future requirements might be or for that matter when the current requirements are changed.Are you most efficient when tasks are dictated or would you prefer to define your own work flow and priorities?I prefer to have tasks (user stories etc..) documented and if they are not already prioritized, then I can set my own priorities.What expectations do you have for the leadership above you, in regards to your professional development?This is probably the easiest question here. Simply put, give me the tools to succeed and provide feedback whether it is good or bad.Why do you want to work at Company X?This is the 4th or 5th time that I started to fill out this form.  I never got past this question.  This is the ‘interview’ question that kills me right from the start.  The short answer is almost always, I do not know if I do want to work for you.  For me, the initial interview/contact is like a first date.  I am obviously interested enough that I am trying to fill out this form but I do not know if I will like Company X and I do not know if you will like me.  Our first date SHOULD consist of a conversation where you tell me why I should want to work there and ultimately; if you even want me to work there.That being said, Company X is a well know and great learning tool.  I have many times found answers to problems on the Company X blog.  I have even hired a developer that had just finished your Rails course and he worked out pretty good.  Another obvious benefit would be the size and therefor the stability of Company X.  I am not looking for a short term relationship, but I am looking for a long term one ;)Can you give us a brief description (in your own words, no resumes or CVs) of your background?I started with RoR in 2010 when the company I was working for created a web based routing application in Rails.  Needless to say I loved it and keep learning until going full time Rails developer in 2011.  I have always been full stack and capable of everything from cutting up a PSD to make the HTML/CSS for the front end thru to server setup and devops.  Last year I started to dig into Angular 2 and I am currently using Angular 1.3 on Rails where I work now.As a manager, what approaches have you used to build and maintain close relationships with your direct reports? Have you found these to be effective? Why/why not?I feel that my military background has made me a great manager.  I also learned that there is a fine line between friend and direct reports.  I am a hands on person and lead by example.  I am also a great people person and know the difference between telling somebody to do something and asking them to do it.  I do walk that fine line where I am friends with those that work for me but that is in the workplace only.  Some might not like this technique but it was ingrained in the military; you don’t party with people that you might have to order to do something that might be deadly.  While there are not normally deadly situations in programming, there are times when you need that separation between friend and manager.Please describe your most challenging experience as a manager. What made the situation difficult for you? How did you resolve the situation? What would you do differently, given the opportunity?The two things that come to mind are the one time I had to fire a developer for lack of skill/productivity and having to keep the balance between the C-level people and/or shareholders and the direction of the team.Firing the developer was difficult because at the end of the day, people need their jobs.  I do not think that I would do anything different though as I had given them ample opportunities to make improvements that went unheeded.The balancing act between the CEO and the project direction was something that I blame myself for and I also feel partially responsible for the startup that I was working for to have failed.  While I did have to take direction from the CEO, I should have pushed back more against things that took more time to build than it was worth.  As the team lead (Director of Software Development) it was my job to ensure that we built a great product and went to market in a timely fashion and by not pushing back on the silly things (e.g. numerous re-styling of front customer facing web pages and rewriting copy repeatedly), that did not happen.Please describe your experience managing software projects. What tools and techniques have you found effective? What tools and techniques have you found to be less than helpful?I feel that we use Scrum and Agile terms way too often.  I agree that they are both software development methodologies but people often get caught up in the term.  I feel that “Agile” is iterative development to include continuous integration.  The best way to manage being agile is using a Kanban board.  I personally love using Pivotal Tracker but I have used many others.  Performing daily standup’s to review the stories that are on the board prevents work from being and staying blocked.  I am also a big fan of weekly retros to discuss development related things that are necessarily connected to existing work.Please describe your experience working with a remote team (as a manager or otherwise). What did you find enjoyable? What did you find challenging?Since 2008 I have mostly worked remotely.  Since that time I have had a couple of jobs that were not remote although I did also have a client from 2011-2016 that was remote.  I have also managed remote employees both in the US as well as in other countries.The biggest issue that I have with remote work is if there are more employees working in house and just a few working remotely.  It is hard to feel like part of the team when the majority of your co-workers are chatting it up around the water cooler and you are left out.  A company that has a mix of onsite and remote workers MUST proactively work on making the remote workers feel like part of the group.  I do love working remotely and I am more efficient when I do work remotely.  With the tools available to us like Slack, Webex, ScreenHero, Skype etc. we do not NEED to be sitting next to each other in order to work effectively.The biggest technical issue that comes to mind is an issue with Elastic Search.  Where I am working now we use ES a lot and probably in ways that it is/was not designed for.  After some fussing around, we ended up actually creating solid expectations based on smoke testing.  On of the side issues was that business was not sure “how” they wanted it to work.  We did a couple of screen shares and created a document of the various edge cases and what the “expectations” were for each.  Figuring out what we wanted to do was the hard part.  Once we got to that stage, adding the code was easy.  I am not always 100% TDD test first but in this case, with so many edge cases, it was the right approach."
  },

  {
    "title": "Why software startups are like the Marine Corps",
    "url": "/2015/why-software-startups-are-like-the-marine-corps/",
    "date": "2015-11-30T18:00:00-06:00",
    "tags": ["startups","mindset","leadership"],
    "excerpt": "  Archived from the original post (2015-12-01). Lightly converted to Markdown; links and formatting preserved where possible.",
    "content": "  Archived from the original post (2015-12-01). Lightly converted to Markdown; links and formatting preserved where possible.“Improvise, Adapt, Overcome” is the unofficial motto of the Marine Corps and should be the motto for a software startup if they are to be successful.I would imagine that more times than not, the original “idea” for a money-making software application is nothing at all like the end product. In the freelance world, it is common to perform a “needs assessment” when talking with a new client. It is the developer’s job to fully outline everything that the client wants for their dream software application to be and look like. Myself, I prefer to do a full user-story workshop. This entails getting down to the nitty gritty of what every part of the app should look like and do. This is all done with the current/existing vision that the client has. And then development begins …If I use a store-bought box cake mix, I imagine that I can add all of the ingredients and it will come out just fine. If I do it from scratch, well there will be somewhat of a trial and error with the ingredients. Too sweet, not sweet enough — all this can change before the cake is done. Just like software.With software development, there is a general direction that you go. This is based on the client’s needs/wants. But the reality of it is that once you start and they see things begin to take shape, the idea that they had in their head morphs. “I thought it would look good like this but now that I see it I do not like that …” Suddenly the straight line from start to finished product twists this way and that.Many factors can cause a “change in direction” when developing a software application. In the beginning there will be more input once it starts to take shape. Beta testers and market research can cause changes to be necessary.In addition to changes with the software, there will be changes to the team. Hiring more, cutting back, hiring again… All of this is possible. In the pursuit of a self-sustaining product (one that pays the bills) many of these changes might be necessary.It isn’t easy, but in order to make it work, be ready to improvise on what you are building, adapt to trends and changes, and overcome any and all obstacles that get in the way."
  },

  {
    "title": "Rails — complex rake task",
    "url": "/2015/rails-complex-rake-task/",
    "date": "2015-06-22T19:00:00-05:00",
    "tags": ["rails","ruby","rake"],
    "excerpt": "  Archived from the original post (2015-06-23). Lightly converted to Markdown; code examples preserved.",
    "content": "  Archived from the original post (2015-06-23). Lightly converted to Markdown; code examples preserved.I had to write a pretty complex rake task this evening. I made some seriously big changes to my client app and needed to run some processes to update some big changes in the database.The first question I had was where to add a method that the rake task could call. While this seemed a pretty easy thing to do, a Google search led me nowhere so I went with trial and error. In the end I found that the method needed to go AFTER the task do block and not in it.Example structure:desc 'this is the description of the task'task do_something: :environment do  my_objects.all.each do |object|    object.do_something_cool  endenddef do_something_cool  something_coolendThe next thing I wanted to do was to use an existing helper that was in my Rails project. This was easily found with Google. You simply need to require the helper file and include it. I added this between the desc and the task do block:require \"#{Rails.root}/app/helpers/my_helper\"include MyHelperHope this helps :)"
  },

  {
    "title": "Offshore, nearshore, come ashore — bringing Rails team in‑house",
    "url": "/2015/offshore-nearshore-come-ashore-bringing-rails-team-in-house/",
    "date": "2015-06-22T19:00:00-05:00",
    "tags": ["rails","teams","hiring","management"],
    "excerpt": "  Archived from the original post (2015-06-23). Lightly converted to Markdown.",
    "content": "  Archived from the original post (2015-06-23). Lightly converted to Markdown.I just made my first year where I work and it has been crazy fun and challenging.When I started a year ago, our application was in the hands of near‑shore developers. They had just taken over from off‑shore developers a couple months prior to my coming on board. They were by far still in the learning curve. The first deployment we did after I got there was a team effort and a load of finger crossing.The near‑shore team did an excellent job learning the application and were churning out user stories like mad. As they were all located in Mexico there was no time difference to speak of and with the help of Skype and daily standups, we were able to work efficiently.Shortly after I started working here, I started to build my in‑house team. Finding good available Rails developers in the Phoenix area is quite impossible.My first hire was somebody that was previously one of my interns for my company. I had to pay pretty good to convince him to come on board. He was quite happy with his current employer.From there the search was difficult. We ended up bringing on a couple of interns from ASU and I just had the pleasure recently to hire one of them on full time. Another developer that was in the learning phase kept hounding me and we brought him on as a junior Rails developer where he has continued to excel. Another developer expressed interest in working with us. We brought him on as an intern and he was recently made a full‑time employee as well.Other additions to the team were a top‑notch Project Manager and a Senior SysAdmin to handle the multiple servers. Last month the contract for the near‑shore developers was up.We are all in‑house now and working on site. The old saying “you can’t teach an old dog new tricks” really means something sometimes with senior developers — they sometimes get stuck in their ways. New junior developers looking to make a living programming are generally eager to learn and so far I have had success with 5 out of 7 interns.They can’t get hired without experience and can’t get experience if they don’t get hired. Try hiring a developer intern. Check out the local universities that have CS programs. If you can’t find great developers; build them."
  },

  {
    "title": "Mongodump cron job for nightly backup",
    "url": "/2015/mongodump-cron-job-for-nightly-backup/",
    "date": "2015-04-28T19:00:00-05:00",
    "tags": ["mongodb","backup","cron","ops"],
    "excerpt": "  Archived from the original post (2015-04-29). Lightly converted to Markdown; command lines preserved.",
    "content": "  Archived from the original post (2015-04-29). Lightly converted to Markdown; command lines preserved.I recently looked for a way to automatically backup a MongoDB database nightly. There are some nice bash scripts out there but I wanted to just do it in a cron job. After some struggling with taring the huge db directory I came up with this:Cron entry (midnight daily):0 0 * * * /bin/bash -l -c 'cd /my_project_path &amp;&amp; \\  mongodump --host 0.0.0.0 -d mydb --username myusername --password mypassword \\  --out /var/dbbackups/backup_$(date +%Y%m%d) &amp;&amp; \\  cd /var/dbbackups &amp;&amp; tar -zcf backup_$(date +%Y%m%d).tar.gz backup_$(date +%Y%m%d)/mydb'Notes:  mongodump will create a directory like backup_20150429/mydb/ with all of the .bson files in it.  We add the date to both the dump dir and the tarball name.  The -l -c makes sure bash loads your login profile and runs the chained commands correctly."
  },

  {
    "title": "Let Go of Me, SSH Session",
    "url": "/2013/let-go-of-me-ssh-session/",
    "date": "2013-12-12T18:00:00-06:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2013-12-13). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2013-12-13). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Dealing with Ruby Time",
    "url": "/2013/dealing-with-ruby-time/",
    "date": "2013-12-12T18:00:00-06:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2013-12-13). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2013-12-13). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Setting up a Ruby on Rails development environment on Mavericks (Dean.io)",
    "url": "/2013/setting-up-a-ruby-on-rails-development-environment-on-mavericks-dean-io/",
    "date": "2013-12-09T18:00:00-06:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2013-12-10). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2013-12-10). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Random Thoughts",
    "url": "/2013/random-thoughts/",
    "date": "2013-12-09T18:00:00-06:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2013-12-10). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2013-12-10). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Why is Ruby on Rails server setup so damned hard to do?",
    "url": "/2013/why-is-ruby-on-rails-server-setup-so-damned-hard-to-do/",
    "date": "2013-10-16T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2013-10-17). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2013-10-17). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "To SaaS or not to SaaS",
    "url": "/2013/to-saas-or-not-to-saas/",
    "date": "2013-09-23T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2013-09-24). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2013-09-24). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Update from Intern #2 — transition to Rails",
    "url": "/2013/update-from-intern-2-transition-to-rails/",
    "date": "2013-07-25T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2013-07-26). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2013-07-26). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "New Beginnings",
    "url": "/2013/new-beginnings/",
    "date": "2013-06-29T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2013-06-30). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2013-06-30). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Make the Unicorns Behave",
    "url": "/2013/make-the-unicorns-behave/",
    "date": "2013-04-30T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2013-05-01). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2013-05-01). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Ruby expression snippet for Sublime Text 2",
    "url": "/2013/ruby-expression-snippet-for-sublime-text-2/",
    "date": "2013-04-13T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2013-04-14). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2013-04-14). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Rails CRM gets an upgrade",
    "url": "/2013/rails-crm-gets-an-upgrade/",
    "date": "2013-03-12T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2013-03-13). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2013-03-13). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Merging PDFs in Rails application",
    "url": "/2013/merging-pdfs-in-rails-application/",
    "date": "2013-03-07T18:00:00-06:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2013-03-08). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2013-03-08). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Cleanup files created with RSpec",
    "url": "/2013/cleanup-files-created-with-rspec/",
    "date": "2013-03-05T18:00:00-06:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2013-03-06). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2013-03-06). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Rails/RSpec total test time",
    "url": "/2013/rails-rspec-total-test-time/",
    "date": "2013-03-04T18:00:00-06:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2013-03-05). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2013-03-05). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Remote/Telecommuting web development",
    "url": "/2013/remote-telecommuting-web-development/",
    "date": "2013-02-07T18:00:00-06:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2013-02-08). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2013-02-08). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "To SaaS or not to SaaS — that is my question",
    "url": "/2013/to-saas-or-not-to-saas-that-is-my-question/",
    "date": "2013-02-05T18:00:00-06:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2013-02-06). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2013-02-06). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Rebel Outpost and Open Source",
    "url": "/2013/rebel-outpost-and-open-source/",
    "date": "2013-01-21T18:00:00-06:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2013-01-22). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2013-01-22). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Plans for 2013",
    "url": "/2013/plans-for-2013/",
    "date": "2013-01-06T18:00:00-06:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2013-01-07). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2013-01-07). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Another year gone by",
    "url": "/2012/another-year-gone-by/",
    "date": "2012-12-19T18:00:00-06:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-12-20). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-12-20). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Ubuntu 12.04: Ruby, Rails, Nginx, Unicorn and Git deploy",
    "url": "/2012/ubuntu-12-04-ruby-rails-nginx-unicorn-and-git-deploy/",
    "date": "2012-12-18T18:00:00-06:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-12-19). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-12-19). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Testing with Rails + Select2",
    "url": "/2012/testing-with-rails-select2/",
    "date": "2012-12-18T18:00:00-06:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-12-19). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-12-19). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Ubuntu 12.10 server setup for Ruby on Rails",
    "url": "/2012/ubuntu-12-10-server-setup-for-ruby-on-rails/",
    "date": "2012-12-04T18:00:00-06:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-12-05). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-12-05). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "What’s new",
    "url": "/2012/whats-new/",
    "date": "2012-11-21T18:00:00-06:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-11-22). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-11-22). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Giving back to the community",
    "url": "/2012/giving-back-to-the-community/",
    "date": "2012-10-28T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-10-29). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-10-29). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Startup Weekend Phoenix impression",
    "url": "/2012/startup-weekend-phoenix-impression/",
    "date": "2012-10-21T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-10-22). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-10-22). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Hey companies looking for direct hires",
    "url": "/2012/hey-companies-looking-for-direct-hires/",
    "date": "2012-10-17T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-10-18). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-10-18). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Rails stuck on the tracks",
    "url": "/2012/rails-stuck-on-the-tracks/",
    "date": "2012-10-10T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-10-11). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-10-11). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Rebel Outpost adds new partner",
    "url": "/2012/rebel-outpost-adds-new-partner/",
    "date": "2012-09-20T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-09-21). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-09-21). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Next up: Intern #2",
    "url": "/2012/next-up-intern-number-2/",
    "date": "2012-09-19T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-09-20). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-09-20). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Dynamically change options for select based on first drop down",
    "url": "/2012/dynamically-change-options-for-select-based-on-first-drop-down/",
    "date": "2012-09-14T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-09-15). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-09-15). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Rails CRM",
    "url": "/2012/rails-crm/",
    "date": "2012-09-05T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-09-06). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-09-06). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Issue installing Ruby after upgrading to Mountain Lion",
    "url": "/2012/issue-installing-ruby-after-upgrading-to-mountain-lion/",
    "date": "2012-09-03T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-09-04). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-09-04). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "What I have learned as a freelance developer",
    "url": "/2012/what-i-have-learned-as-a-freelance-developer/",
    "date": "2012-08-29T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-08-30). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-08-30). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Invitation modal",
    "url": "/2012/invitation-modal/",
    "date": "2012-08-29T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-08-30). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-08-30). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Writing stories for Pivotal Tracker",
    "url": "/2012/writing-stories-for-pivotal-tracker/",
    "date": "2012-08-12T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-08-13). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-08-13). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Twitter Bootstrap — oh how I love thee",
    "url": "/2012/twitter-bootstrap-oh-how-i-love-thee/",
    "date": "2012-08-01T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-08-02). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-08-02). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Django or Rails",
    "url": "/2012/django-or-rails/",
    "date": "2012-08-01T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-08-02). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-08-02). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "My, how they grow up so fast",
    "url": "/2012/my-how-they-grow-up-so-fast/",
    "date": "2012-07-30T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-07-31). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-07-31). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Great read: Egoless Programming",
    "url": "/2012/great-read-egoless-programming/",
    "date": "2012-07-30T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-07-31). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-07-31). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "My intern is all grown up",
    "url": "/2012/my-intern-is-all-grown-up/",
    "date": "2012-07-18T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-07-19). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-07-19). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "m3talsmith makes daily standup",
    "url": "/2012/m3talsmith-makes-daily-standup/",
    "date": "2012-07-17T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-07-18). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-07-18). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Rebel Outpost",
    "url": "/2012/rebel-outpost/",
    "date": "2012-07-10T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-07-11). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-07-11). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Confirm this web page is being redirected to a new location",
    "url": "/2012/confirm-this-web-page-is-being-redirected-to-a-new-location/",
    "date": "2012-07-10T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-07-11). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-07-11). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "The progression of RebelHold",
    "url": "/2012/the-progression-of-rebelhold/",
    "date": "2012-07-02T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-07-03). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-07-03). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "RebelHold: Growing the community",
    "url": "/2012/rebelhold-growing-the-community/",
    "date": "2012-05-10T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-05-11). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-05-11). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Life as a Rails developer",
    "url": "/2012/life-as-a-rails-developer/",
    "date": "2012-04-27T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-04-28). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-04-28). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Ruby and Rails 101 Course",
    "url": "/2012/ruby-and-rails-101-course/",
    "date": "2012-03-28T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-03-29). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-03-29). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Why RebelHold kicks ass",
    "url": "/2012/why-rebelhold-kicks-ass/",
    "date": "2012-03-03T18:00:00-06:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-03-04). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-03-04). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Successful entrepreneur in AZ",
    "url": "/2012/successful-entrepreneur-in-az/",
    "date": "2012-02-16T18:00:00-06:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-02-17). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-02-17). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "RebelHold web development collective",
    "url": "/2012/rebelhold-web-development-collective/",
    "date": "2012-02-16T18:00:00-06:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-02-17). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-02-17). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "So you want to be a programmer",
    "url": "/2012/so-you-want-to-be-a-programmer/",
    "date": "2012-02-15T18:00:00-06:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-02-16). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-02-16). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "I want to work for you",
    "url": "/2012/i-want-to-work-for-you/",
    "date": "2012-01-12T18:00:00-06:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-01-13). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-01-13). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Create a Ruby on Rails TODO application (Pt 3)",
    "url": "/2012/create-a-ruby-on-rails-todo-application-pt-3/",
    "date": "2012-01-04T18:00:00-06:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-01-05). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-01-05). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Becoming a better developer",
    "url": "/2012/becoming-a-better-developer/",
    "date": "2012-01-01T18:00:00-06:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2012-01-02). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2012-01-02). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Want to learn a thing or two about programming right here, right now?",
    "url": "/2011/want-to-learn-a-thing-or-two-about-programming-right-here-right-now/",
    "date": "2011-12-30T18:00:00-06:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2011-12-31). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2011-12-31). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Create a Ruby on Rails TODO application (Pt 2)",
    "url": "/2011/create-a-ruby-on-rails-todo-application-pt-2/",
    "date": "2011-12-29T18:00:00-06:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2011-12-30). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2011-12-30). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Create a Ruby on Rails TODO application",
    "url": "/2011/create-a-ruby-on-rails-todo-application/",
    "date": "2011-12-26T18:00:00-06:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2011-12-27). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2011-12-27). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "First month as RoR programmer",
    "url": "/2011/first-month-as-ror-programmer/",
    "date": "2011-11-17T18:00:00-06:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2011-11-18). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2011-11-18). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "What’s in a name: programmer or developer?",
    "url": "/2011/whats-in-a-name-programmer-or-developer/",
    "date": "2011-11-05T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2011-11-06). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2011-11-06). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Rails: underestimated",
    "url": "/2011/rails-underestimated/",
    "date": "2011-11-04T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2011-11-05). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2011-11-05). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Jobless in Arizona",
    "url": "/2011/jobless-in-arizona/",
    "date": "2011-10-19T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2011-10-20). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2011-10-20). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Why I love Ruby on Rails",
    "url": "/2011/why-i-love-ruby-on-rails/",
    "date": "2011-10-05T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2011-10-06). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2011-10-06). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "My Ruby on Rails progress",
    "url": "/2011/my-ruby-on-rails-progress/",
    "date": "2011-09-02T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2011-09-03). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2011-09-03). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Could Phoenix become a technology mecca?",
    "url": "/2011/could-phoenix-become-a-technology-mecca/",
    "date": "2011-06-15T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2011-06-16). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2011-06-16). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Gangplank: co-working in Arizona",
    "url": "/2011/gangplank-co-working-in-arizona/",
    "date": "2011-05-04T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2011-05-05). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2011-05-05). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Next steps",
    "url": "/2011/next-steps/",
    "date": "2011-05-03T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2011-05-04). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2011-05-04). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "What programming language do I learn?",
    "url": "/2011/what-programming-language-do-i-learn/",
    "date": "2011-04-10T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2011-04-11). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2011-04-11). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "Desert Code Camp, Chandler AZ",
    "url": "/2011/desert-code-camp-chandler-az/",
    "date": "2011-04-04T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2011-04-05). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2011-04-05). This is a preservation stub; see the original link for full content."
  },

  {
    "title": "What’s going on",
    "url": "/2011/whats-going-on/",
    "date": "2011-03-25T19:00:00-05:00",
    "tags": [],
    "excerpt": "  Archived from the original post (2011-03-26). This is a preservation stub; see the original link for full content.",
    "content": "  Archived from the original post (2011-03-26). This is a preservation stub; see the original link for full content."
  }

]

