<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2025-09-19T11:25:49-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Code It Forward</title><subtitle>Practical Rails · React · GraphQL · TypeScript — pay it forward.</subtitle><author><name>Bob Roberts</name></author><entry><title type="html">The Future of Rails: Bridging the Generation Gap</title><link href="http://localhost:4000/rails/community/future/2025/09/25/the-future-of-rails-bridging-the-generation-gap/" rel="alternate" type="text/html" title="The Future of Rails: Bridging the Generation Gap" /><published>2025-09-25T10:00:00-05:00</published><updated>2025-09-25T10:00:00-05:00</updated><id>http://localhost:4000/rails/community/future/2025/09/25/the-future-of-rails-bridging-the-generation-gap</id><content type="html" xml:base="http://localhost:4000/rails/community/future/2025/09/25/the-future-of-rails-bridging-the-generation-gap/">&lt;p&gt;&lt;em&gt;This is the final post in &lt;a href=&quot;/rails/community/career/2025/09/12/the-rails-generation-gap-why-it-matters/&quot;&gt;The Rails Generation Gap series&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Looking back, Rails has lived through at least two “generations.” The early adopters, many of whom were drawn in by _why’s whimsy or Ryan Bates’ RailsCasts, built the culture of long form, handcrafted knowledge. The next wave, fueled by bootcamps, brought scale, diversity, and a flood of new energy.&lt;/p&gt;

&lt;p&gt;The gap between those generations is real. You can feel it in the different ways people learn, communicate, and even argue about best practices. But gaps don’t have to be divides. They can be bridges.&lt;/p&gt;

&lt;p&gt;What excites me is the chance to combine the best of both worlds. The early Rails culture valued depth, curiosity, and mentorship. The new Rails culture values accessibility, speed, and inclusivity. Imagine if we blended those strengths. If beginners had both the quick answers and the long form context, both the Slack channel and the detailed write up.&lt;/p&gt;

&lt;p&gt;Rails isn’t dead, despite what the hot takes say. It’s evolving. And maybe this generation gap is exactly what will keep it alive. Each wave brings something new to the table. The challenge, and the opportunity, is to make sure we don’t lose the best parts of what came before.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;what-each-generation-brings&quot;&gt;What each generation brings&lt;/h2&gt;

&lt;p&gt;The early Rails generation brought craftsmanship. They read source code for fun. They wrote blog posts that explained not just how to do something, but why you’d want to. They built tools like RailsCasts and _why’s guides that made learning feel like an adventure.&lt;/p&gt;

&lt;p&gt;That generation also brought patience. They were willing to spend hours debugging a problem, not just to fix it, but to understand it. They mentored newcomers one on one, passing down not just techniques but philosophy.&lt;/p&gt;

&lt;p&gt;The bootcamp generation brought pragmatism. They focused on shipping working software quickly. They democratized access to Rails knowledge through structured curricula and supportive communities. They proved that you don’t need a computer science degree to build great web applications.&lt;/p&gt;

&lt;p&gt;They also brought fresh perspectives. Many bootcamp graduates came from other industries and brought domain expertise that enriched the Rails ecosystem. They asked different questions and solved different problems.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;where-the-friction-happens&quot;&gt;Where the friction happens&lt;/h2&gt;

&lt;p&gt;The tension between generations shows up in predictable places.&lt;/p&gt;

&lt;p&gt;Code reviews become philosophical debates. A veteran might suggest a more “Rails way” approach, while a newer developer pushes back with “but this works and ships faster.” Both are right, but they’re optimizing for different things.&lt;/p&gt;

&lt;p&gt;Hiring conversations get complicated. Teams struggle to evaluate candidates who learned Rails in fundamentally different ways. Do you value someone who can explain Active Record’s internals, or someone who can ship features quickly using modern tools?&lt;/p&gt;

&lt;p&gt;Technical decisions become generational markers. Should we use the latest JavaScript framework or stick with Rails’ built in solutions? Should we prioritize developer experience or application performance? Different generations often have different default answers.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;building-bridges&quot;&gt;Building bridges&lt;/h2&gt;

&lt;p&gt;The smartest teams I’ve worked with find ways to bridge these differences instead of letting them become divisions.&lt;/p&gt;

&lt;p&gt;They create space for both quick answers and deep dives. Code reviews include both “here’s how to fix this” and “here’s why this pattern exists.” Documentation covers both the how and the why. Team discussions welcome both “let’s ship this” and “let’s understand this.”&lt;/p&gt;

&lt;p&gt;They also recognize that different situations call for different approaches. When you’re prototyping a new feature, bootcamp style speed might be exactly what you need. When you’re debugging a performance issue, old school depth becomes essential.&lt;/p&gt;

&lt;p&gt;The key is making these choices intentional rather than accidental. Teams that bridge the gap well talk explicitly about when to optimize for speed versus understanding, when to use established patterns versus trying new approaches.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;learning-from-each-other&quot;&gt;Learning from each other&lt;/h2&gt;

&lt;p&gt;I’ve seen veterans learn as much from newcomers as the other way around. A senior developer who’s been writing Rails for fifteen years might discover a gem or technique that solves a problem they’ve been wrestling with for months.&lt;/p&gt;

&lt;p&gt;Newcomers bring fresh eyes to old problems. They question assumptions that veterans take for granted. They’re not weighed down by “we tried that before and it didn’t work” thinking.&lt;/p&gt;

&lt;p&gt;Veterans bring context that prevents newcomers from repeating old mistakes. They can explain why certain patterns exist, what problems they solve, and when they might not be the right choice.&lt;/p&gt;

&lt;p&gt;The magic happens when these perspectives combine. Veterans who stay curious and newcomers who value context create teams that are both fast and thoughtful.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-community-opportunity&quot;&gt;The community opportunity&lt;/h2&gt;

&lt;p&gt;Individual teams can only do so much. The Rails community as a whole has an opportunity to model how different generations can work together.&lt;/p&gt;

&lt;p&gt;Conference lineups that include both established voices and fresh perspectives. Open source projects that welcome both deep architectural discussions and practical feature requests. Learning resources that cater to both quick reference needs and comprehensive understanding.&lt;/p&gt;

&lt;p&gt;The Rails community has always been good at this, but it requires ongoing attention. As the framework matures and the community grows, it’s easy for different groups to drift into their own corners.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;whats-next-for-rails&quot;&gt;What’s next for Rails&lt;/h2&gt;

&lt;p&gt;Rails is entering an interesting phase. It’s mature enough to have established patterns and best practices, but still evolving enough to incorporate new ideas and approaches.&lt;/p&gt;

&lt;p&gt;The framework itself reflects this balance. Rails 7 includes both time tested conventions and modern innovations like Hotwire. It respects the Rails way while acknowledging that the web has changed since 2004.&lt;/p&gt;

&lt;p&gt;The community is following a similar path. Long form blog posts coexist with quick video tutorials. Detailed documentation sits alongside interactive learning platforms. Traditional mentorship happens alongside community driven support.&lt;/p&gt;

&lt;p&gt;This isn’t a compromise or a watered down middle ground. It’s a recognition that different people learn differently and different situations require different approaches.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;making-it-work&quot;&gt;Making it work&lt;/h2&gt;

&lt;p&gt;The future of Rails depends on how well we navigate this generational transition. Do we let the gap become a divide, with different groups talking past each other? Or do we build bridges that let everyone contribute their strengths?&lt;/p&gt;

&lt;p&gt;I’m optimistic because I’ve seen it work. Teams that embrace both speed and depth. Communities that welcome both newcomers and veterans. Projects that balance innovation with stability.&lt;/p&gt;

&lt;p&gt;It requires intentionality though. We have to actively create space for different perspectives. We have to resist the urge to dismiss approaches that don’t match our own preferences. We have to remember that the goal is building great software and supporting each other, not proving that our way is the only way.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-long-view&quot;&gt;The long view&lt;/h2&gt;

&lt;p&gt;When I think about the future of Rails, I don’t picture one side winning out. I picture a conversation across generations. Old guard and new guard alike, figuring out how to build not just great apps, but a community that lasts.&lt;/p&gt;

&lt;p&gt;Rails has survived multiple technology cycles, framework wars, and predictions of its demise. It’s survived because it adapts while staying true to its core principles. The generation gap is just the latest challenge, and I think it’s one the community can handle.&lt;/p&gt;

&lt;p&gt;The early Rails generation built something special. The bootcamp generation expanded it and made it accessible. The next generation will inherit both legacies and build something even better.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;closing-thought&quot;&gt;Closing thought&lt;/h2&gt;

&lt;p&gt;So when I think about the future of Rails, I see opportunity. The chance to combine the craftsmanship of the early days with the accessibility of the modern era. The chance to build a community that values both depth and speed, both tradition and innovation.&lt;/p&gt;

&lt;p&gt;The generation gap is real, but it doesn’t have to be permanent. With intention, patience, and mutual respect, it can become a bridge to something better.&lt;/p&gt;

&lt;p&gt;What’s your vision for the future of Rails? How do you think we can best bridge the generational differences in our community?&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Previous:&lt;/strong&gt; &lt;a href=&quot;/rails/mentorship/career/2025/09/22/mentorship-in-rails-from-one-on-one-to-at-scale/&quot;&gt;Mentorship in Rails: From One-on-One to At-Scale&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Thanks for following along with this series. If you missed any posts, you can find them all under the &lt;a href=&quot;/tags/rails-generation-gap/&quot;&gt;Rails Generation Gap tag&lt;/a&gt;. I’d love to hear your thoughts on how we can build better bridges in the Rails community.&lt;/em&gt;&lt;/p&gt;</content><author><name>Bob Roberts</name></author><category term="rails" /><category term="community" /><category term="future" /><category term="rails" /><category term="community" /><category term="mentorship" /><category term="future" /><category term="culture" /><summary type="html">Rails has lived through multiple generations. The gap between them is real, but it doesn&apos;t have to be a divide. How we bridge these generations will shape Rails&apos; next chapter.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/covers/rails-future-bridge.svg" /><media:content medium="image" url="http://localhost:4000/assets/images/covers/rails-future-bridge.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Mentorship in Rails: From One-on-One to At-Scale</title><link href="http://localhost:4000/rails/mentorship/career/2025/09/22/mentorship-in-rails-from-one-on-one-to-at-scale/" rel="alternate" type="text/html" title="Mentorship in Rails: From One-on-One to At-Scale" /><published>2025-09-22T10:00:00-05:00</published><updated>2025-09-22T10:00:00-05:00</updated><id>http://localhost:4000/rails/mentorship/career/2025/09/22/mentorship-in-rails-from-one-on-one-to-at-scale</id><content type="html" xml:base="http://localhost:4000/rails/mentorship/career/2025/09/22/mentorship-in-rails-from-one-on-one-to-at-scale/">&lt;p&gt;&lt;em&gt;This is part 4 of &lt;a href=&quot;/rails/community/career/2025/09/12/the-rails-generation-gap-why-it-matters/&quot;&gt;The Rails Generation Gap series&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Early in my career, mentorship was intimate. You had one person, maybe two, showing you the ropes. They’d sit with you, review your code, explain why Rails did things a certain way. That relationship shaped not just your code, but your habits and your confidence.&lt;/p&gt;

&lt;p&gt;But as bootcamps took off, companies suddenly had to onboard groups of juniors at once. I remember watching teams try to scale mentorship in real time. Pair programming rotations, “office hours,” internal wikis. It wasn’t bad, but it was different. Instead of a single guide, you got a patchwork of advice from whoever had time that day.&lt;/p&gt;

&lt;p&gt;I’ve been on both sides of that equation. I’ve been the junior, grateful for a patient mentor who explained things three different ways until it finally clicked. And I’ve been the mentor, with limited hours, trying to balance teaching with shipping. Scaling mentorship is hard. You want to give each person that “deep dive” experience, but reality often means handing out quick fixes instead.&lt;/p&gt;

&lt;p&gt;The Rails community has always valued helping others grow. The question is, how do we maintain that spirit when the numbers don’t add up? When there are more new developers than seasoned ones? Maybe it’s about rethinking what mentorship looks like. Maybe it’s not one to one anymore, but one to many: blog posts, screencasts, livestreams, open source.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-old-model&quot;&gt;The old model&lt;/h2&gt;

&lt;p&gt;When I started Rails in 2008, mentorship felt more like an apprenticeship. You’d find someone who knew the framework, and they’d take you under their wing. Not because they had to, but because that’s how the community worked.&lt;/p&gt;

&lt;p&gt;I remember my first Rails mentor. He’d spend an hour walking me through a single method, explaining not just what it did, but why it existed, what problems it solved, and what could go wrong if I used it incorrectly. He’d show me the source code, point me to related patterns, and give me homework: “Go read this chapter, then come back with questions.”&lt;/p&gt;

&lt;p&gt;That kind of mentorship was slow, but it was thorough. You didn’t just learn Rails, you learned how to think about Rails. You absorbed the philosophy along with the syntax.&lt;/p&gt;

&lt;p&gt;The relationship mattered too. When you hit a wall, you knew exactly who to ask. When you made progress, you had someone to share it with. That mentor became invested in your growth in a way that felt personal.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-scaling-challenge&quot;&gt;The scaling challenge&lt;/h2&gt;

&lt;p&gt;Then bootcamps changed the math. Suddenly, companies weren’t hiring one junior developer every few months. They were hiring cohorts of five, ten, sometimes twenty new developers at once.&lt;/p&gt;

&lt;p&gt;The old mentorship model broke down fast. You can’t assign twenty juniors to five seniors and expect the same quality of guidance. The seniors burn out, the juniors get frustrated, and everyone starts looking for shortcuts.&lt;/p&gt;

&lt;p&gt;I watched teams try different approaches. Some did pair programming rotations where juniors worked with a different senior each week. Others set up “office hours” where seniors made themselves available for questions at specific times. A few tried to document everything in internal wikis and hope for the best.&lt;/p&gt;

&lt;p&gt;Each approach had tradeoffs. Rotation meant juniors got exposure to different styles, but lost the continuity of a single relationship. Office hours were efficient, but felt transactional. Documentation was scalable, but couldn’t answer follow up questions or adapt to individual learning styles.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;what-we-lost&quot;&gt;What we lost&lt;/h2&gt;

&lt;p&gt;The shift to scaled mentorship solved the numbers problem, but it changed the experience in ways we’re still figuring out.&lt;/p&gt;

&lt;p&gt;The biggest loss was depth. When you have one mentor, they can tailor their teaching to how you learn. They know your strengths and blind spots. They can push you when you need it and slow down when you’re struggling.&lt;/p&gt;

&lt;p&gt;With scaled approaches, you often get generic advice. The person helping you today doesn’t know what you learned yesterday or what you’re planning to work on tomorrow. They solve your immediate problem, but they can’t help you connect the dots.&lt;/p&gt;

&lt;p&gt;The relationship aspect suffered too. It’s harder to build trust and rapport when you’re working with a different person each week. Juniors become more hesitant to ask “dumb” questions. Seniors become more focused on quick fixes than deep understanding.&lt;/p&gt;

&lt;p&gt;I’ve seen this play out in code reviews. In the old model, a mentor might spend twenty minutes explaining why a particular approach was problematic and walking through alternatives. In the scaled model, you’re more likely to get a comment like “use includes here” without much context about why.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;what-we-kept&quot;&gt;What we kept&lt;/h2&gt;

&lt;p&gt;But scaled mentorship isn’t all bad. In some ways, it’s better than the old model.&lt;/p&gt;

&lt;p&gt;Exposure to different perspectives is valuable. When you work with multiple seniors, you see different approaches to the same problems. You learn that there’s often more than one “right” way to do something.&lt;/p&gt;

&lt;p&gt;It’s also more resilient. In the old model, if your mentor left the company or got busy with other projects, you were stuck. With scaled approaches, there’s always someone else who can help.&lt;/p&gt;

&lt;p&gt;The documentation and process focus has benefits too. When teams are forced to write down their knowledge, it becomes more accessible to everyone. New hires can get up to speed faster, and existing team members can reference shared resources instead of asking the same questions over and over.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;new-forms-of-mentorship&quot;&gt;New forms of mentorship&lt;/h2&gt;

&lt;p&gt;The most interesting development has been the emergence of new mentorship models that work at scale.&lt;/p&gt;

&lt;p&gt;Some companies have started formal apprenticeship programs where juniors spend their first six months rotating through different teams and projects. It’s structured, but it preserves some of the depth of traditional mentorship.&lt;/p&gt;

&lt;p&gt;Others have embraced asynchronous mentorship through internal blogs, recorded code reviews, and shared learning resources. Seniors document their decision making process, and juniors can learn from it even when they’re not working directly together.&lt;/p&gt;

&lt;p&gt;Open source has become a mentorship platform too. Contributing to Rails or popular gems gives you access to feedback from experienced developers around the world. It’s not as personal as traditional mentorship, but it’s incredibly scalable.&lt;/p&gt;

&lt;p&gt;The Rails community has also gotten better at creating learning content. Podcasts, YouTube channels, newsletters, and blogs provide ongoing education that supplements whatever formal mentorship exists at work.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;making-it-work&quot;&gt;Making it work&lt;/h2&gt;

&lt;p&gt;Successful teams I’ve worked with combine multiple approaches. They might have formal mentor assignments for the first few months, then transition to more flexible arrangements as juniors gain confidence.&lt;/p&gt;

&lt;p&gt;They also recognize that different people need different kinds of support. Some juniors thrive with lots of independence and occasional check ins. Others need more hands on guidance. Scaled mentorship works better when it’s flexible enough to accommodate both.&lt;/p&gt;

&lt;p&gt;The key is being intentional about it. Teams that just throw juniors into the mix and hope for the best usually struggle. Teams that think carefully about how to provide guidance and support at scale tend to do better.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-community-angle&quot;&gt;The community angle&lt;/h2&gt;

&lt;p&gt;Individual companies can only do so much. The Rails community as a whole has a role to play in mentorship too.&lt;/p&gt;

&lt;p&gt;The culture of helping others is still there, but it’s expressed differently now. Instead of one on one relationships, it’s blog posts that explain complex concepts, conference talks that share hard won lessons, and open source contributions that make the framework better for everyone.&lt;/p&gt;

&lt;p&gt;Social media has become a mentorship platform too. Twitter threads, LinkedIn posts, and Discord conversations provide bite sized learning opportunities. It’s not as deep as traditional mentorship, but it’s accessible to anyone with an internet connection.&lt;/p&gt;

&lt;p&gt;The challenge is signal to noise. There’s so much content out there that it can be hard to find the good stuff. Curation becomes important. Lists of recommended resources, community endorsed tutorials, and trusted voices help filter the noise.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;looking-ahead&quot;&gt;Looking ahead&lt;/h2&gt;

&lt;p&gt;Mentorship in Rails will keep evolving. Remote work has changed the dynamics again. AI tools are starting to provide some of the quick answers that used to require human help. The next generation of developers will have different expectations and different needs.&lt;/p&gt;

&lt;p&gt;But the core principle remains the same: experienced developers helping newer ones grow. The format might change, but the spirit endures.&lt;/p&gt;

&lt;p&gt;The question isn’t whether scaled mentorship is better or worse than the old model. It’s how we can make it work better. How do we preserve the depth and relationship building that made traditional mentorship valuable while still serving the larger numbers of people who want to learn Rails today?&lt;/p&gt;

&lt;p&gt;I think the answer is hybrid approaches. Formal programs for structure, informal relationships for depth, community resources for scale, and flexibility to adapt as people’s needs change.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;closing-thought&quot;&gt;Closing thought&lt;/h2&gt;

&lt;p&gt;Mentorship is still here. It just doesn’t always look like sitting next to someone at their desk. The challenge is making sure it doesn’t get lost in the noise.&lt;/p&gt;

&lt;p&gt;If you’re a senior developer, think about how you can contribute to mentorship at scale. Write that blog post. Record that screencast. Answer questions in community forums. Review that open source PR with detailed feedback.&lt;/p&gt;

&lt;p&gt;If you’re a junior developer, seek out multiple sources of guidance. Find formal mentors when you can, but also build relationships with peers, contribute to open source, and engage with the broader community.&lt;/p&gt;

&lt;p&gt;The Rails community has always been about helping each other grow. That hasn’t changed, even if the methods have.&lt;/p&gt;

&lt;p&gt;What’s your experience with mentorship in Rails? How has it evolved in your career, and what approaches have worked best for you?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Previous:&lt;/strong&gt; &lt;a href=&quot;/rails/community/culture/2025/09/19/from-mailing-lists-to-slack-how-rails-culture-shifted/&quot;&gt;From Mailing Lists to Slack: How Rails Culture Shifted&lt;/a&gt;
&lt;!-- | **Next:** [The Future of Rails: Bridging the Generation Gap](/rails/community/future/2025/09/25/the-future-of-rails-bridging-the-generation-gap/) --&gt;&lt;/p&gt;</content><author><name>Bob Roberts</name></author><category term="rails" /><category term="mentorship" /><category term="career" /><category term="rails" /><category term="mentorship" /><category term="bootcamps" /><category term="career" /><category term="teaching" /><summary type="html">How Rails mentorship evolved from intimate one-on-one relationships to scaled approaches. What we kept, what we lost, and what we&apos;re still figuring out.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/covers/rails-mentorship-scale.svg" /><media:content medium="image" url="http://localhost:4000/assets/images/covers/rails-mentorship-scale.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">From Mailing Lists to Slack: How Rails Culture Shifted</title><link href="http://localhost:4000/rails/community/culture/2025/09/19/from-mailing-lists-to-slack-how-rails-culture-shifted/" rel="alternate" type="text/html" title="From Mailing Lists to Slack: How Rails Culture Shifted" /><published>2025-09-19T10:00:00-05:00</published><updated>2025-09-19T10:00:00-05:00</updated><id>http://localhost:4000/rails/community/culture/2025/09/19/from-mailing-lists-to-slack-how-rails-culture-shifted</id><content type="html" xml:base="http://localhost:4000/rails/community/culture/2025/09/19/from-mailing-lists-to-slack-how-rails-culture-shifted/">&lt;p&gt;&lt;em&gt;This is part 3 of &lt;a href=&quot;/rails/community/career/2025/09/12/the-rails-generation-gap-why-it-matters/&quot;&gt;The Rails Generation Gap series&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The platforms changed everything. Not just how we get help, but what kind of help we expect and how we relate to each other while getting it.&lt;/p&gt;

&lt;p&gt;I was thinking about this after watching a new Rails developer post the same question in three different Discord channels, get three different answers in under five minutes, pick one that worked, and move on. No follow up. No “thanks, that makes sense now.” Just problem solved, next task.&lt;/p&gt;

&lt;p&gt;Compare that to the mailing list thread I still have bookmarked from 2009. Someone asked about routing constraints. The first reply explained how constraints work. The second added context about performance implications. The third linked to a blog post about advanced routing patterns. By the end, five people had chimed in, and the original poster understood not just how to fix their immediate problem, but why the solution worked and what to watch out for next time.&lt;/p&gt;

&lt;p&gt;Both approaches get you unstuck. But they create very different learning experiences and very different communities.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-mailing-list-era&quot;&gt;The mailing list era&lt;/h2&gt;

&lt;p&gt;Back in the day, Rails had a few key gathering spots. The Rails mailing list. The Ruby Talk list. IRC channels like #rubyonrails on Freenode. These weren’t fast, but they were thoughtful.&lt;/p&gt;

&lt;p&gt;When you posted a question, you knew you might wait. That waiting time wasn’t wasted though. You’d often spend it digging deeper into the problem, reading source code, or trying different approaches. By the time someone replied, you had context for their answer.&lt;/p&gt;

&lt;p&gt;The replies themselves were different too. People didn’t just drop a code snippet and disappear. They’d explain the why, point you to related concepts, and often end with something like “let me know if that helps” or “feel free to ask follow ups.”&lt;/p&gt;

&lt;p&gt;I remember one thread where I asked about caching strategies. The response wasn’t just the syntax I needed. It was a mini lesson on cache invalidation, Rails conventions, and a suggestion to read a specific chapter of the Pickaxe book. That person took time to teach, not just solve.&lt;/p&gt;

&lt;p&gt;IRC was the closest thing we had to instant help, but even there, the culture was different. Channels had regulars who knew each other. There were inside jokes, ongoing conversations, and a sense of continuity. When you asked a question, someone might say “hang on, let me check something” and disappear for ten minutes. Then they’d come back with a detailed explanation or a link to a blog post they’d written about the exact same problem.&lt;/p&gt;

&lt;p&gt;The pace was slower, but the depth was there. People stuck around for follow up questions. They’d check in later to see if their suggestion worked. It felt like a workshop where everyone was learning together.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-shift-to-instant-everything&quot;&gt;The shift to instant everything&lt;/h2&gt;

&lt;p&gt;Then came the platforms we know today. Stack Overflow launched in 2008 and quickly became the go to for programming questions. Discord and Slack made real time chat mainstream. Bootcamp communities created their own support networks.&lt;/p&gt;

&lt;p&gt;The speed improvement was dramatic. Post a question on Stack Overflow and you might get an answer in minutes. Jump into a Discord channel and someone’s usually around to help immediately.&lt;/p&gt;

&lt;p&gt;But something changed in the process. The incentives shifted from teaching to solving. Stack Overflow rewards quick, correct answers. Discord conversations move fast and get buried. The patient, context rich exchanges of the mailing list era became harder to find.&lt;/p&gt;

&lt;p&gt;The new platforms brought real benefits. You don’t need to know about mailing lists or IRC to get help. The barriers to entry dropped significantly. When you’re stuck and need to ship something, getting unstuck in minutes instead of hours matters. More people asking and answering questions means more edge cases get covered. Stack Overflow’s format makes it easy to find existing answers to common problems.&lt;/p&gt;

&lt;p&gt;The Rails community became more welcoming to newcomers. If you’re learning Rails today, you have resources that would have seemed magical in 2008.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;what-we-lost&quot;&gt;What we lost&lt;/h2&gt;

&lt;p&gt;But we also lost some things that mattered.&lt;/p&gt;

&lt;p&gt;Quick answers often skip the why. You get the fix without understanding the underlying concepts. Transactional help doesn’t build the same bonds as ongoing mentorship. The pressure to answer fast can lead to surface level solutions that work but aren’t optimal. The expectation of instant answers can make people less willing to struggle with problems on their own first.&lt;/p&gt;

&lt;p&gt;I’ve seen this play out in hiring. Candidates who learned Rails through bootcamps and Stack Overflow can often ship features quickly, but struggle when asked to explain the tradeoffs behind their choices. They know the how, but not always the why.&lt;/p&gt;

&lt;p&gt;On the flip side, I’ve worked with veterans who dismiss newer developers as “just copying and pasting from Stack Overflow” without recognizing that those same developers often bring fresh perspectives and aren’t weighed down by legacy assumptions.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;bridging-old-and-new&quot;&gt;Bridging old and new&lt;/h2&gt;

&lt;p&gt;The most effective teams I’ve worked with find ways to blend both approaches.&lt;/p&gt;

&lt;p&gt;They use modern tools for speed and accessibility, but create space for deeper learning. Code reviews become teaching moments. Senior developers write internal blog posts explaining not just what they built, but why they made specific choices. Teams have “office hours” where anyone can ask questions and get more than just a quick fix.&lt;/p&gt;

&lt;p&gt;Some companies have started formal mentorship programs. Others encourage developers to write long form posts about problems they’ve solved. A few have experimented with “slow” Slack channels where the expectation is thoughtful responses, not instant fixes.&lt;/p&gt;

&lt;p&gt;The tools have changed, but the human need for mentorship and community hasn’t. We just need to be more intentional about creating space for it.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-hybrid-approach&quot;&gt;The hybrid approach&lt;/h2&gt;

&lt;p&gt;I think the ideal is a hybrid approach. Keep the accessibility and speed of modern platforms, but find ways to inject more depth and relationship building.&lt;/p&gt;

&lt;p&gt;Some Discord servers have dedicated channels for deeper discussions. Some Stack Overflow answers go well beyond the minimum viable solution. Some bootcamps pair students with mentors for ongoing guidance beyond the curriculum.&lt;/p&gt;

&lt;p&gt;Rails is at an interesting inflection point. It’s mature enough that the basics are well documented, but complex enough that there’s still plenty to learn. The community is bigger and more diverse than ever, but also more fragmented.&lt;/p&gt;

&lt;p&gt;How we handle that fragmentation will shape the next generation of Rails developers. Do we optimize purely for speed and efficiency? Or do we find ways to preserve some of the mentorship culture that made Rails special in the first place?&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next&lt;/h2&gt;

&lt;p&gt;The shift from mailing lists to Slack isn’t just about technology. It reflects how Rails grew from a tight knit craft community to a mainstream framework. Both eras had their strengths.&lt;/p&gt;

&lt;p&gt;The question isn’t whether the old ways were better. It’s what we can learn from them to make the current community even stronger.&lt;/p&gt;

&lt;p&gt;If you’ve lived through both sides of this shift, what differences have you noticed? How do you think we can bring back some of that depth and mentorship in today’s fast paced world?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Previous:&lt;/strong&gt; &lt;a href=&quot;/rails/community/history/2025/09/15/rails-before-bootcamps-a-tight-knit-craft-community/&quot;&gt;Rails Before Bootcamps — A Tight‑Knit Craft Community&lt;/a&gt;
&lt;!-- | **Next:** [Mentorship in Rails: From One-on-One to At-Scale](/rails/mentorship/career/2025/09/22/mentorship-in-rails-from-one-on-one-to-at-scale/) --&gt;&lt;/p&gt;</content><author><name>Bob Roberts</name></author><category term="rails" /><category term="community" /><category term="culture" /><category term="rails" /><category term="mentorship" /><category term="community" /><category term="culture" /><category term="communication" /><summary type="html">The way Rails developers find help has changed completely. What we gained and lost in the shift from mailing lists to instant answers.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/covers/rails-culture-shift.svg" /><media:content medium="image" url="http://localhost:4000/assets/images/covers/rails-culture-shift.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Rails Before Bootcamps — A Tight‑Knit Craft Community</title><link href="http://localhost:4000/rails/community/history/2025/09/15/rails-before-bootcamps-a-tight-knit-craft-community/" rel="alternate" type="text/html" title="Rails Before Bootcamps — A Tight‑Knit Craft Community" /><published>2025-09-15T10:00:00-05:00</published><updated>2025-09-15T10:00:00-05:00</updated><id>http://localhost:4000/rails/community/history/2025/09/15/rails-before-bootcamps-a-tight-knit-craft-community</id><content type="html" xml:base="http://localhost:4000/rails/community/history/2025/09/15/rails-before-bootcamps-a-tight-knit-craft-community/">&lt;p&gt;&lt;em&gt;This is part 2 of &lt;a href=&quot;/rails/community/career/2025/09/12/the-rails-generation-gap-why-it-matters/&quot;&gt;The Rails Generation Gap series&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When people talk about the early Rails community, they often focus on the code. But for me, what stands out are the characters, the voices, and the quirky ways people learned.&lt;/p&gt;

&lt;p&gt;When I started Rails in 2008, the framework had been around for a few years but learning it wasn’t as structured as it is today. There weren’t week-by-week curricula, Slack mentors on call, or neat tutorials for every error message. Instead, newcomers like me relied on a patchwork of pioneers who shared their wisdom in creative, sometimes eccentric ways.&lt;/p&gt;

&lt;p&gt;It was messy. It was magical. And it shaped those of us who learned Rails in that era.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;railscasts-mentorship-at-scale&quot;&gt;RailsCasts: Mentorship at Scale&lt;/h2&gt;

&lt;p&gt;If you were learning Rails in 2008 or the early 2010s, chances are you watched Ryan Bates’ RailsCasts. My daughter knew the opening music from RailsCasts and would ask “Are you watching that guy again?”&lt;/p&gt;

&lt;p&gt;Every week, Ryan released a short screencast walking through a gem, a pattern, or a tricky concept. They weren’t flashy. They were practical, approachable, and packed with insight. For many of us who started around that time, RailsCasts was the bootcamp before bootcamps existed.&lt;/p&gt;

&lt;p&gt;I still remember pausing a RailsCasts episode every 30 seconds to copy code into my editor, rewinding when I inevitably missed a step. Ryan had this gift for making complex things feel doable. He wasn’t just teaching features—he was teaching how to think in Rails.&lt;/p&gt;

&lt;p&gt;To this day, &lt;a href=&quot;http://railscasts.com/&quot;&gt;RailsCasts&lt;/a&gt; remains a cultural landmark. The catalog stopped updating in 2013, but developers still revisit those episodes like treasured textbooks.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;_why-the-lucky-stiff-the-poet-of-ruby&quot;&gt;_why the Lucky Stiff: The Poet of Ruby&lt;/h2&gt;

&lt;p&gt;The Rails community also had its artists. None more famous—or infamous—than _why the lucky stiff.&lt;/p&gt;

&lt;p&gt;_why wasn’t about documentation or best practices. He was about joy. His works—like Why’s (Poignant) Guide to Ruby—were whimsical, surreal, and filled with cartoon foxes. It was less a tutorial and more a love letter to programming.&lt;/p&gt;

&lt;p&gt;For many newcomers, _why’s writing made Ruby feel human. He reminded us that code wasn’t just logic; it was creativity. His sudden disappearance in 2009 left a hole, but his spirit still lingers in how Rubyists value expressiveness and fun.&lt;/p&gt;

&lt;p&gt;I won’t go into the details here but check out these articles to learn more about _why:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slate.com/articles/technology/technology/2012/03/ruby_ruby_on_rails_and__why_the_disappearance_of_one_of_the_world_s_most_beloved_computer_programmers_.html&quot;&gt;slate.com article&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.smashingmagazine.com/2010/05/why-a-tale-of-a-post-modern-genius/&quot;&gt;smashingmagizine.com article&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://poignant.guide/&quot;&gt;Why’s (Poignant) Guide to Ruby&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;rails-for-zombies-learning-could-be-playful&quot;&gt;Rails for Zombies: Learning Could Be Playful&lt;/h2&gt;

&lt;p&gt;Not long after, platforms like Code School (before it became Pluralsight) gave us Rails for Zombies, an interactive, gamified way to learn Rails right in the browser.&lt;/p&gt;

&lt;p&gt;Instead of dry documentation, you solved challenges to help animated zombies complete tasks. It was playful, experimental, and hinted at what was coming: a world where Rails education could be accessible to anyone, not just those willing to dig through mailing lists and source code.&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://www.youtube.com/watch?v=4Vk4W767lak&quot;&gt;Rails Conf 2013 Rails for Zombies talk&lt;/a&gt; to see what I mean.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;what-this-era-felt-like&quot;&gt;What This Era Felt Like&lt;/h2&gt;

&lt;p&gt;Taken together, RailsCasts, _why, and Rails for Zombies illustrate the unique vibe of the pre-bootcamp era:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DIY Learning&lt;/strong&gt; → You pieced things together from blogs, screencasts, and mailing lists.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Personal Mentorship&lt;/strong&gt; → Help often came from a single person’s voice, not a company’s curriculum.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Culture &amp;amp; Quirk&lt;/strong&gt; → Learning Rails wasn’t sterile; it was filled with personality, creativity, and play.&lt;/p&gt;

&lt;p&gt;It felt like joining a small club where everyone knew each other’s names. But it also meant access was uneven. If you didn’t stumble onto RailsCasts, or if _why’s whimsical style didn’t click with you, your learning curve could be brutal.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;what-we-carry-forward&quot;&gt;What We Carry Forward&lt;/h2&gt;

&lt;p&gt;Looking back, I think this era left us with two big lessons:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learning is cultural, not just technical.&lt;/strong&gt; The Rails community thrived because it had voices like Ryan Bates and _why who made knowledge stick.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Accessibility matters.&lt;/strong&gt; Rails for Zombies hinted at something powerful—that playful, approachable learning could open doors to more people. Bootcamps would later take this idea to scale.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;closing-thought&quot;&gt;Closing Thought&lt;/h2&gt;

&lt;p&gt;The Rails of yesterday was small, quirky, and often hard to penetrate. But it was also a place where creativity, mentorship, and community shone through individual voices.&lt;/p&gt;

&lt;p&gt;If you learned Rails through RailsCasts, _why, or Rails for Zombies—what do you remember most? And what do you think today’s newcomers are missing without those touchstones?&lt;/p&gt;

&lt;hr /&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Previous:&lt;/strong&gt; &lt;a href=&quot;/rails/community/career/2025/09/12/the-rails-generation-gap-why-it-matters/&quot;&gt;The Rails Generation Gap: Why It Matters&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Next:&lt;/strong&gt; &lt;a href=&quot;/rails/community/culture/2025/09/19/from-mailing-lists-to-slack-how-rails-culture-shifted/&quot;&gt;From Mailing Lists to Slack: How Rails Culture Shifted&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>Bob Roberts</name></author><category term="rails" /><category term="community" /><category term="history" /><category term="rails" /><category term="mentorship" /><category term="community" /><category term="history" /><summary type="html">How the early Rails community learned in public — and what we can bring forward now.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/covers/rails-before-bootcamps.svg" /><media:content medium="image" url="http://localhost:4000/assets/images/covers/rails-before-bootcamps.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">What finally fixed our deployment and Sidekiq mess</title><link href="http://localhost:4000/rails/production/2025/09/12/what-finally-fixed-our-deployment-and-sidekiq-mess/" rel="alternate" type="text/html" title="What finally fixed our deployment and Sidekiq mess" /><published>2025-09-12T11:00:00-05:00</published><updated>2025-09-12T11:00:00-05:00</updated><id>http://localhost:4000/rails/production/2025/09/12/what-finally-fixed-our-deployment-and-sidekiq-mess</id><content type="html" xml:base="http://localhost:4000/rails/production/2025/09/12/what-finally-fixed-our-deployment-and-sidekiq-mess/">&lt;p&gt;Over the last week I hit a cluster of production problems that looked unrelated at first: intermittent deploys that “completed” but left the app unresponsive, email blasts that “finished” with zero sends, and a Sidekiq dashboard screaming 60–70% failure rates. This post is my straight‑from-the-console write‑up of what actually broke, how I tracked it down, and the simple changes that stabilized everything.&lt;/p&gt;

&lt;p&gt;If you’re running Rails on Nginx + Passenger with MySQL, Redis, and Sidekiq (and some Delayed Job still hanging around), this will probably feel familiar.&lt;/p&gt;

&lt;h2 id=&quot;the-symptoms&quot;&gt;The symptoms&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Deploy “succeeds,” site feels sluggish or unresponsive afterward.&lt;/li&gt;
  &lt;li&gt;Sidekiq shows high failure rates, idle workers, and no throughput.&lt;/li&gt;
  &lt;li&gt;Email blasts target thousands of customers but report zero sent.&lt;/li&gt;
  &lt;li&gt;Logs full of noise in test and prod, making the real issues easy to miss.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-real-root-cause&quot;&gt;The real root cause&lt;/h2&gt;

&lt;p&gt;It wasn’t a single bug. It was a perfect storm:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A Ruby upgrade changed memory/boot characteristics.&lt;/li&gt;
  &lt;li&gt;I had both Sidekiq and Delayed Job running (historical reasons).&lt;/li&gt;
  &lt;li&gt;Passenger was running multiple app processes.&lt;/li&gt;
  &lt;li&gt;And the big one: the database pool was way too small.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sidekiq wasn’t “broken.” It was starved. Jobs were dying with:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;could not obtain a database connection within 5.000 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once I stopped staring at Sidekiq’s failure counter and looked at actual error classes in Retry/Dead sets, the picture was obvious: ActiveRecord connection timeouts across the board.&lt;/p&gt;

&lt;h2 id=&quot;the-simple-calculation-that-matters&quot;&gt;The simple calculation that matters&lt;/h2&gt;

&lt;p&gt;This is the mental model I now use and documented in a deployment guide for future reference.&lt;/p&gt;

&lt;p&gt;You need at least:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Passenger processes (each wants a DB connection)&lt;/li&gt;
  &lt;li&gt;plus Sidekiq threads across all processes&lt;/li&gt;
  &lt;li&gt;plus a little buffer (console, rake tasks, admin scripts, spikes)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example from my production box:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Passenger: 5 processes&lt;/li&gt;
  &lt;li&gt;Sidekiq: 1 process × 3 threads (I dialed this down)&lt;/li&gt;
  &lt;li&gt;Buffer: 5–10 (call it 7 for “stuff you forgot”)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So minimum pool = 5 (Passenger) + 3 (Sidekiq) + 7 (buffer) = 15.
I set it to 25 because the server has plenty of RAM (32 GB) and I’d rather have headroom than timeouts.&lt;/p&gt;

&lt;p&gt;Production &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;database.yml&lt;/code&gt; ended up like this:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;production&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql2&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;25&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;localhost&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# …rest omitted&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After bumping the pool, the connection timeouts disappeared immediately.&lt;/p&gt;

&lt;h2 id=&quot;the-sidekiq-side-of-the-house&quot;&gt;The Sidekiq side of the house&lt;/h2&gt;

&lt;p&gt;I also simplified my worker setup. I don’t need hero numbers here—predictability beats bragging rights. I now run:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Concurrency (threads): 3&lt;/li&gt;
  &lt;li&gt;Processes: start one Sidekiq process (or two if I’m pushing a big blast)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sidekiq.yml&lt;/code&gt; reflects that:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;:concurrency: &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;:queues:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;- [critical, 10]&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;- [email_blast, 6]&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;- [default, 5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If I want more fault tolerance or better CPU spread, I start a second Sidekiq process with the same concurrency. Two procs × 3 threads = 6 total DB connections, still fine under a 25‑connection pool.&lt;/p&gt;

&lt;h2 id=&quot;the-email-blast-gotcha-sidekiq-vs-delayed-job&quot;&gt;The email blast gotcha (Sidekiq vs Delayed Job)&lt;/h2&gt;

&lt;p&gt;My email blasts were “completing” with zero sends. The reason: the controller path had been switched to run synchronously during an earlier incident, while mailers still used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deliver_later&lt;/code&gt; (which goes through ActiveJob → Delayed Job in this app). That left me in a half‑migrated state: some work in Sidekiq, some in DJ, both competing for the same small pool.&lt;/p&gt;

&lt;p&gt;I re‑enabled async sending for blasts and let Sidekiq handle it. The worker is straight‑forward and logs failures cleanly:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SendEspecialsWorker&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Sidekiq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Worker&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sidekiq_options&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;queue: :email_blast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;retry: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coupons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email_blast_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;email_blast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email_blast_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EmailBlast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email_blast_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send_especial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coupons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email_blast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Key point: pick one background system per workflow. Mixing Sidekiq and Delayed Job on the same hot paths is a great way to create invisible contention.&lt;/p&gt;

&lt;h2 id=&quot;what-i-run-before-deploy-now&quot;&gt;What I run before deploy now&lt;/h2&gt;

&lt;p&gt;I pulled these steps into the deployment guide so I don’t “cowboy fix” at 2am again. The gist:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Clean up any straggler processes (nginx, passenger, delayed_job, ruby)&lt;/li&gt;
  &lt;li&gt;Drop caches and restart in a clean order&lt;/li&gt;
  &lt;li&gt;Start Sidekiq to the target concurrency&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl stop nginx
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pkill &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; delayed_job&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pkill &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; passenger&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pkill &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; ruby
&lt;span class=&quot;nb&quot;&gt;sudo sync&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;3 | &lt;span class=&quot;nb&quot;&gt;sudo tee&lt;/span&gt; /proc/sys/vm/drop_caches
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl start nginx
&lt;span class=&quot;c&quot;&gt;# start sidekiq with -c 3 and proper logs/PIDs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then I watch the first few minutes like a hawk:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;passenger-status&lt;/code&gt; for process health and queue length&lt;/li&gt;
  &lt;li&gt;Sidekiq stats for processed/failed trends and queue sizes&lt;/li&gt;
  &lt;li&gt;Memory and swap to catch early pressure&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;quick-checks-that-saved-me-time&quot;&gt;Quick checks that saved me time&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Confirm Sidekiq’s “Failed” vs Retry/Dead sets. Dashboard counters are cumulative. The real signal is “do new jobs fail?”&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sidekiq::Stats.new&lt;/code&gt; and print before/after numbers around a test job. If processed goes up without failed, you’re good.&lt;/li&gt;
  &lt;li&gt;Don’t trust logger levels alone in tests if you’re using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;puts&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;puts&lt;/code&gt; goes to STDOUT regardless; either switch to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rails.logger&lt;/code&gt; or redirect STDOUT in test.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-id-do-differently-next-time&quot;&gt;What I’d do differently next time&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Size the DB pool first. It’s the cheapest lever with the highest upside.&lt;/li&gt;
  &lt;li&gt;Avoid half‑migrations. If a workflow starts on Sidekiq, finish the job and remove the Delayed Job path (or vice versa).&lt;/li&gt;
  &lt;li&gt;Keep Sidekiq boring: low concurrency, more processes only when needed, queue weights tuned to business priorities.&lt;/li&gt;
  &lt;li&gt;Document the decision math in the deployment guide, so future me doesn’t have to reconstruct it under pressure.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The chronic failures weren’t Sidekiq being flaky—they were ActiveRecord connection timeouts.&lt;/li&gt;
  &lt;li&gt;Passenger procs + Sidekiq threads + a buffer must fit under your DB &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pool&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;On a 32 GB host, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pool: 25&lt;/code&gt; is a rounding error in memory and buys you stability.&lt;/li&gt;
  &lt;li&gt;Run email blasts async in Sidekiq; don’t split them across Sidekiq and Delayed Job.&lt;/li&gt;
  &lt;li&gt;Keep Sidekiq to 3 threads per process unless you’ve proven you need more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want the full step‑by‑step let me know. I put everything into a document including cleanup commands, monitoring, and the connection math. It’s the checklist I wish I’d had before the week started.&lt;/p&gt;</content><author><name>Bob Roberts</name></author><category term="rails" /><category term="production" /><category term="sidekiq" /><category term="deployment" /><category term="passenger" /><category term="mysql" /><category term="redis" /><category term="activerecord" /><category term="database-pool" /><summary type="html">A week of production chaos taught me that Sidekiq failures aren&apos;t always about Sidekiq. Sometimes it&apos;s your database connection pool that&apos;s starving everything else.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/covers/deployment-sidekiq-fix.svg" /><media:content medium="image" url="http://localhost:4000/assets/images/covers/deployment-sidekiq-fix.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">The Rails Generation Gap: Why It Matters</title><link href="http://localhost:4000/rails/community/career/2025/09/12/the-rails-generation-gap-why-it-matters/" rel="alternate" type="text/html" title="The Rails Generation Gap: Why It Matters" /><published>2025-09-12T10:00:00-05:00</published><updated>2025-09-12T10:00:00-05:00</updated><id>http://localhost:4000/rails/community/career/2025/09/12/the-rails-generation-gap-why-it-matters</id><content type="html" xml:base="http://localhost:4000/rails/community/career/2025/09/12/the-rails-generation-gap-why-it-matters/">&lt;p&gt;I still remember the first time I got truly stuck on a Rails bug in 2008. I sent a question to a mailing list and figured I might never hear back. An hour later, a stranger replied with a fix, an explanation, and a reminder to pay it forward. Before I knew it, I had met a total stranger and they were mentoring me. That was the vibe when I started: small, tight knit, and very collaborative.&lt;/p&gt;

&lt;p&gt;Jump ahead a decade and the on ramp looks different. Fewer mailing lists. More bootcamps, YouTube, Discord, and Stack Overflow. Folks learn fast, ship fast, and get help in new places. Rails changed, but the bigger shift was how people came into the community and learned the craft.&lt;/p&gt;

&lt;p&gt;That shift is what I think of as the Rails Generation Gap. We do not talk about it enough, and it matters.&lt;/p&gt;

&lt;p&gt;I am starting a short series on this. I will look at the early craft culture, the bootcamp boom, the cultural shifts that came with it, and some practical ways to bridge the gap. The idea for this series was what I cam away from with the first Rails meetup I have been to in years, which I wrote about &lt;a href=&quot;/general/meta/2025/09/08/welcome-to-my-blog/#what-brought-me-back&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;before-bootcamps-a-craft-culture&quot;&gt;Before bootcamps: a craft culture&lt;/h2&gt;

&lt;p&gt;When I started with Rails in 2008, it still felt like magic. Convention over configuration made things click. Getting started was not easy though. Docs were thin, posts were dense, and half the time you learned by reading the source.&lt;/p&gt;

&lt;p&gt;The upside was depth. Those of us who came in during that era learned the how and the why. Mentorship was built in because it had to be.&lt;/p&gt;

&lt;p&gt;It also felt closed at times. Fewer entry points. Less diversity. Sometimes it read like an insider club.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-bootcamp-boom&quot;&gt;The bootcamp boom&lt;/h2&gt;

&lt;p&gt;Around 2013, bootcamps exploded. Course Report counted roughly two thousand grads in 2013. By 2019, it was more than twenty three thousand a year, and Rails was everywhere in those programs.&lt;/p&gt;

&lt;p&gt;Rails made sense for teaching. You could get someone to a working web app in weeks, not months. For career changers, that was huge.&lt;/p&gt;

&lt;p&gt;More people in the community was a good thing. It opened doors beyond CS degrees and long nights reading code.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-gap&quot;&gt;The gap&lt;/h2&gt;

&lt;p&gt;Growth comes with tradeoffs. Some of the old guard saw bootcamp grads as folks who could ship but could not explain what Active Record was doing under the hood. Some newcomers saw veterans as unapproachable or stuck in old patterns.&lt;/p&gt;

&lt;p&gt;The way we shared knowledge changed too. Long form posts and deep dives gave way to shorter answers and quick videos. Stack Overflow peaked around 2013 to 2015 and then slid. By 2023, new questions were down about seventy seven percent compared to 2009.&lt;/p&gt;

&lt;p&gt;That shift in how we learn and teach created friction.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;why-it-still-matters&quot;&gt;Why it still matters&lt;/h2&gt;

&lt;p&gt;Rails is mature now. It is not the new hot thing. The gap still shows up in day to day work.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hiring and onboarding: I have seen teams struggle to bring on a lot of juniors without strong mentorship in place.&lt;/li&gt;
  &lt;li&gt;Open source health: Rails thrives on contribution. Without context and a habit of paying it forward, it gets harder to sustain.&lt;/li&gt;
  &lt;li&gt;Mixing voices: Veterans bring depth. New folks bring energy and fresh perspective. We need both.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Whether we talk to each other, or past each other, determines a lot about where Rails goes next.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;closing-the-gap&quot;&gt;Closing the gap&lt;/h2&gt;

&lt;p&gt;A few practical moves I have seen help:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Veterans can share not just code, but the history and tradeoffs that shaped Rails.&lt;/li&gt;
  &lt;li&gt;Bootcamp grads can document what they learn and pull others up the ladder behind them.&lt;/li&gt;
  &lt;li&gt;Companies can try apprenticeship style onboarding and give seniors time to mentor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rails has always been more than code. Community is the multiplier. How we teach, share, and build will shape the next decade.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;what-is-next&quot;&gt;What is next&lt;/h2&gt;

&lt;p&gt;This is the first post in a short series on the Rails Generation Gap. Next up, I will rewind to the early era of screencasts, whimsical guides, and in person mentorship, and pull forward the parts that still work today.&lt;/p&gt;

&lt;p&gt;If you have lived through both sides of this, what differences have you noticed? How do you think we can build better bridges between generations of Rails developers?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Next in this series:&lt;/strong&gt; &lt;a href=&quot;/rails/community/history/2025/09/15/rails-before-bootcamps-a-tight-knit-craft-community/&quot;&gt;Rails Before Bootcamps — A Tight‑Knit Craft Community&lt;/a&gt;&lt;/p&gt;</content><author><name>Bob Roberts</name></author><category term="rails" /><category term="community" /><category term="career" /><category term="rails" /><category term="mentorship" /><category term="bootcamps" /><category term="community" /><category term="culture" /><summary type="html">From mailing lists to bootcamps, the way people enter Rails has changed. That shift affects how we hire, mentor, and build.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/covers/rails-generation-gap.svg" /><media:content medium="image" url="http://localhost:4000/assets/images/covers/rails-generation-gap.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Dusting Off the Blog (Again)</title><link href="http://localhost:4000/general/meta/2025/09/08/welcome-to-my-blog/" rel="alternate" type="text/html" title="Dusting Off the Blog (Again)" /><published>2025-09-08T12:00:00-05:00</published><updated>2025-09-08T12:00:00-05:00</updated><id>http://localhost:4000/general/meta/2025/09/08/welcome-to-my-blog</id><content type="html" xml:base="http://localhost:4000/general/meta/2025/09/08/welcome-to-my-blog/">&lt;p&gt;If you’ve been following this blog for a while (and there might be a few of you), you’ll notice it’s been quiet since 2017. Seven years is a long time in tech. A lot has changed.&lt;/p&gt;

&lt;p&gt;I used to write regularly about Rails, freelancing, and the Arizona tech scene. Then life happened, priorities shifted, and the blog went dormant.&lt;/p&gt;

&lt;h2 id=&quot;what-brought-me-back&quot;&gt;What brought me back&lt;/h2&gt;

&lt;p&gt;A few days ago I went to &lt;a href=&quot;https://www.linkedin.com/company/xoruby/posts/?feedView=all&quot;&gt;XORuby&lt;/a&gt; in Chicago. First tech event I’d attended in person since probably 2017. I honestly didn’t realize how much I missed it.&lt;/p&gt;

&lt;p&gt;We talked about _why the lucky stiff, old Ruby legends, and I even mentioned that I once followed a cat named Gorbypuff on Twitter (RIP). It was the kind of conversation that reminded me why I fell in love with the Ruby community in the first place.&lt;/p&gt;

&lt;p&gt;Sitting there, I realized we’ve all gotten lazy since COVID. It’s too easy to attend meetings online, watch conference videos from our couch, or just skip community stuff altogether. But we’re missing the human interaction. The random conversations. The energy you only get when developers are in the same room geeking out together.&lt;/p&gt;

&lt;p&gt;After that meetup, I kept thinking: we need to get back to having fun with this stuff. Back to Rails for Zombies-style learning. Back to _why’s talking foxes. Back to the days when Ruby felt like a community of people who genuinely enjoyed building things together.&lt;/p&gt;

&lt;h2 id=&quot;whats-different-this-time&quot;&gt;What’s different this time&lt;/h2&gt;

&lt;p&gt;Back in 2011-2017, I was writing about learning Rails, starting a freelance business, and trying to build a tech community in Phoenix. Those posts are still here (check the archives) - they’re a time capsule of a different era in web development.&lt;/p&gt;

&lt;p&gt;Now I’m in a different place. Rails is mature. JavaScript has eaten the world. I’ve worked at companies of different sizes, built systems that actually scaled, and learned from mistakes that seemed impossible at the time.&lt;/p&gt;

&lt;h2 id=&quot;what-im-planning-to-write-about&quot;&gt;What I’m planning to write about&lt;/h2&gt;

&lt;p&gt;This isn’t going to be another “here’s how to build a todo app” blog. I want to focus on the messy, real-world stuff that doesn’t fit neatly into tutorials:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;War stories from production&lt;/strong&gt; - The bugs that kept me up at night and how we fixed them&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Technology decisions and their consequences&lt;/strong&gt; - Why we chose certain tools and what we learned&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The human side of development&lt;/strong&gt; - Team dynamics, code reviews, and technical communication&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Honest takes on the JavaScript/React/TypeScript ecosystem&lt;/strong&gt; - What actually works vs what gets hype&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basically, the kind of content I wish I could have read when I was figuring this stuff out.&lt;/p&gt;

&lt;h2 id=&quot;so-im-starting-with-this-blog&quot;&gt;So I’m starting with this blog&lt;/h2&gt;

&lt;p&gt;That meetup reminded me that I used to be part of something. Not just using Rails to build apps, but actually participating in the community. Writing. Sharing what I learned. Connecting with other developers.&lt;/p&gt;

&lt;p&gt;Personal blogs used to be how we did this. Before everything moved to LinkedIn posts and Twitter threads. Before algorithms decided what was worth reading.&lt;/p&gt;

&lt;p&gt;I miss that version of the web. I miss the version of myself that contributed to it.&lt;/p&gt;

&lt;p&gt;The community gave me a lot over the years - knowledge, friendships, opportunities. This blog is how I’m starting to give something back.&lt;/p&gt;

&lt;h2 id=&quot;what-to-expect&quot;&gt;What to expect&lt;/h2&gt;

&lt;p&gt;I’m not committing to a posting schedule. This isn’t a content marketing blog. I’ll write when I have something worth saying.&lt;/p&gt;

&lt;p&gt;I want to bring back some of that old Ruby community spirit - the curiosity, the willingness to share half-baked ideas, the sense that we’re all figuring this out together.&lt;/p&gt;

&lt;p&gt;If you’ve been here since the early days, thanks for sticking around. If you’re new, welcome. Either way, I hope you find something useful.&lt;/p&gt;

&lt;p&gt;The old posts are still here if you want to see how my thinking has evolved (or laugh at my 2011 predictions about the future of web development). But I’m more interested in what comes next.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Back to building things.&lt;/p&gt;

&lt;p&gt;Bob&lt;/p&gt;</content><author><name>Bob Roberts</name></author><category term="general" /><category term="meta" /><category term="blogging" /><category term="comeback" /><category term="reflection" /><summary type="html">After a long hiatus, I&apos;m bringing this blog back to life. What changed, why I stopped, and what I&apos;m planning to write about this time around.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/covers/blog-comeback.png" /><media:content medium="image" url="http://localhost:4000/assets/images/covers/blog-comeback.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Making Apps Feel Instant: My Experience with Realtime Rails and Apollo</title><link href="http://localhost:4000/react/realtime/2025/02/01/realtime-and-optimistic-ui-with-apollo-and-rails/" rel="alternate" type="text/html" title="Making Apps Feel Instant: My Experience with Realtime Rails and Apollo" /><published>2025-02-01T10:00:00-06:00</published><updated>2025-02-01T10:00:00-06:00</updated><id>http://localhost:4000/react/realtime/2025/02/01/realtime-and-optimistic-ui-with-apollo-and-rails</id><content type="html" xml:base="http://localhost:4000/react/realtime/2025/02/01/realtime-and-optimistic-ui-with-apollo-and-rails/">&lt;p&gt;I’ve been working on a dashboard app lately that needed to feel snappy. You know the feeling when you click “Save” and nothing happens for a second? That pause where users wonder if they actually clicked the button? I wanted to eliminate that.&lt;/p&gt;

&lt;p&gt;Turns out, making UIs feel instant isn’t just about making the server faster. It’s about making smart choices about what to show users while they wait.&lt;/p&gt;

&lt;h2 id=&quot;the-optimistic-ui-revelation&quot;&gt;The optimistic UI revelation&lt;/h2&gt;

&lt;p&gt;A few months ago I was building a simple task management feature. Users could create tasks, toggle them complete, delete them. Standard stuff. But every action felt sluggish because users had to wait for the server response before seeing any change.&lt;/p&gt;

&lt;p&gt;Then I discovered Apollo’s optimistic responses. Game changer.&lt;/p&gt;

&lt;p&gt;Here’s what made the difference. Instead of waiting for the server, I started showing users what they expected to see immediately:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// When someone creates a new task, show it right away&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useMutation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CREATE_TASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;optimisticResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;createTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`temp-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// temporary ID&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;__typename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Oops, something went wrong - the UI automatically rolls back&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Failed to create task:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The difference was night and day. Click “Add Task” and boom - it’s there. No waiting. If something goes wrong on the server, Apollo handles rolling back the optimistic change.&lt;/p&gt;

&lt;p&gt;But I learned the hard way that optimistic UI isn’t magic. It works great for simple actions like creating, toggling, or deleting. But I tried to get too clever with complex forms and nested relationships. That’s where things got messy.&lt;/p&gt;

&lt;h2 id=&quot;when-optimistic-ui-isnt-enough&quot;&gt;When optimistic UI isn’t enough&lt;/h2&gt;

&lt;p&gt;Optimistic updates work great when you’re the only one changing data. But what about when multiple users are working on the same thing? That’s where I needed real-time subscriptions.&lt;/p&gt;

&lt;p&gt;I was building a collaborative feature where team members could see each other’s changes live. ActionCable made this surprisingly straightforward with Rails:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# In my Rails GraphQL schema&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Types::SubscriptionType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BaseObject&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:task_updated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TaskType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# After updating a task anywhere in the app&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;MySchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subscriptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:task_updated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updated_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On the client side, I had to set up Apollo to handle both regular HTTP requests and WebSocket subscriptions:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// This took me a while to get right&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wsLink&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GraphQLWsLink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;createClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ws://localhost:3000/cable&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;splitLink&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;definition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getMainDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;definition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;OperationDefinition&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;definition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;operation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;subscription&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;wsLink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;httpLink&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The magic happened when I subscribed to updates:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;useSubscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TASK_UPDATED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;onData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Someone else updated a task - show it immediately&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;updatedTask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;taskUpdated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Apollo automatically updates the cache&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-actioncable-bottleneck&quot;&gt;The ActionCable bottleneck&lt;/h2&gt;

&lt;p&gt;Everything worked great in development and with a few users. But when I load-tested with a couple hundred concurrent WebSocket connections, ActionCable started to struggle. Ruby isn’t great at handling tons of concurrent connections.&lt;/p&gt;

&lt;p&gt;That’s when I discovered AnyCable. It’s a drop-in replacement that offloads WebSocket handling to a Go process while keeping all my Rails business logic intact. The switch was painless - just changed my cable config and started the AnyCable-Go server.&lt;/p&gt;

&lt;p&gt;The performance difference was dramatic. What used to choke at 200 connections now handled thousands without breaking a sweat.&lt;/p&gt;

&lt;h2 id=&quot;sometimes-simple-polling-is-better&quot;&gt;Sometimes simple polling is better&lt;/h2&gt;

&lt;p&gt;Not everything needs WebSockets. For data that updates occasionally - like user counts or notification badges - I just use Apollo’s polling feature:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GET_NOTIFICATION_COUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pollInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30000&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Check every 30 seconds&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s simpler, more reliable, and puts less strain on the server.&lt;/p&gt;

&lt;h2 id=&quot;lessons-learned-the-hard-way&quot;&gt;Lessons learned the hard way&lt;/h2&gt;

&lt;p&gt;Building realtime features taught me a few things:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Optimistic UI is great, but have a rollback plan.&lt;/strong&gt; I spent hours debugging “ghost” items that appeared when mutations failed silently.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WebSockets are stateful and fragile.&lt;/strong&gt; Always handle reconnections gracefully. Users close laptops, switch networks, go through tunnels.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Not everything needs to be realtime.&lt;/strong&gt; I got carried away and made every little thing live. Some data is fine being a few seconds stale.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Test with real network conditions.&lt;/strong&gt; Everything works great on localhost. Try it on a flaky mobile connection.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The combination of optimistic UI and selective realtime updates has made my apps feel much more responsive. Users notice the difference immediately. The key is being thoughtful about when to use each technique.&lt;/p&gt;</content><author><name>Bob Roberts</name></author><category term="react" /><category term="realtime" /><category term="apollo" /><category term="optimistic-ui" /><category term="subscriptions" /><category term="actioncable" /><category term="anycable" /><category term="rails" /><summary type="html">Lessons learned from building realtime features with Apollo and Rails. When optimistic UI works great, when it doesn&apos;t, and why I switched to AnyCable.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/covers/realtime-optimistic-ui-pro.svg" /><media:content medium="image" url="http://localhost:4000/assets/images/covers/realtime-optimistic-ui-pro.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">The Authentication Dilemma: Sessions vs JWTs in Rails</title><link href="http://localhost:4000/security/rails/2025/01/24/auth-in-rails-and-apollo-sessions-vs-jwt/" rel="alternate" type="text/html" title="The Authentication Dilemma: Sessions vs JWTs in Rails" /><published>2025-01-24T10:00:00-06:00</published><updated>2025-01-24T10:00:00-06:00</updated><id>http://localhost:4000/security/rails/2025/01/24/auth-in-rails-and-apollo-sessions-vs-jwt</id><content type="html" xml:base="http://localhost:4000/security/rails/2025/01/24/auth-in-rails-and-apollo-sessions-vs-jwt/">&lt;p&gt;I’ve been building Rails apps for over a decade now, and I’ve probably implemented user authentication about fifty different ways. Most of those attempts were overly complicated. I’ve learned that when it comes to auth, boring usually wins.&lt;/p&gt;

&lt;p&gt;Last year I was working on a new Rails app with a React frontend. The team immediately started debating: “Should we use JWTs or stick with Rails sessions?” Everyone had strong opinions, most based on blog posts they’d read rather than real experience.&lt;/p&gt;

&lt;p&gt;Here’s what I’ve learned from actually shipping both approaches.&lt;/p&gt;

&lt;h2 id=&quot;why-i-usually-stick-with-sessions&quot;&gt;Why I usually stick with sessions&lt;/h2&gt;

&lt;p&gt;For most Rails apps I build, I reach for good old cookie-based sessions first. They’re built into Rails, they work with ActionCable out of the box, and I get security features for free.&lt;/p&gt;

&lt;p&gt;Here’s my typical setup:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# config/initializers/session_store.rb&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;session_store&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:cookie_store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;key: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;_myapp_session&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;same_site: :lax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;secure: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;production?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;httponly: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;httponly: true&lt;/code&gt; means JavaScript can’t access the session cookie. That’s a good thing - XSS attacks can’t steal it. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;same_site: :lax&lt;/code&gt; helps prevent CSRF attacks.&lt;/p&gt;

&lt;p&gt;But here’s the catch with single-page apps: you still need CSRF protection for state-changing requests:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# app/controllers/application_controller.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;protect_from_forgery&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;with: :exception&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;current_user&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@current_user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I expose the CSRF token to my React app through a meta tag:&lt;/p&gt;

&lt;div class=&quot;language-erb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- app/views/layouts/application.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;csrf-token&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form_authenticity_token&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On the Apollo side, I need to include credentials with every request and add the CSRF token:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// apollo/client.js&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HttpLink&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@apollo/client&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setContext&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@apollo/client/link/context&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;httpLink&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HttpLink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; 
  &lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/graphql&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;na&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// This sends cookies with every request&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;csrfLink&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;meta[name=&quot;csrf-token&quot;]&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)?.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;X-CSRF-Token&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&apos;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ApolloClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;csrfLink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;httpLink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;InMemoryCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This approach is boring, but it works. The browser handles everything automatically, and I don’t have to worry about token storage or expiration.&lt;/p&gt;

&lt;h2 id=&quot;when-i-reach-for-jwts&quot;&gt;When I reach for JWTs&lt;/h2&gt;

&lt;p&gt;I only use JWTs when I have a specific need they solve:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Cross-domain requests&lt;/strong&gt; - My API is on a different domain than my frontend&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Mobile apps&lt;/strong&gt; - Cookies don’t work as nicely in native apps&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Multiple services&lt;/strong&gt; - I need to verify users across different backend services&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But JWTs come with complexity. Here’s a basic implementation I’ve used:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Gemfile&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;jwt&apos;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# app/services/auth_service.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthService&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;SECRET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;jwt_secret&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;sub: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;exp: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;JWT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SECRET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;HS256&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JWT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SECRET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;algorithm: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;HS256&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;sub&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JWT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DecodeError&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In my ApplicationController:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;current_user&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@current_user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find_user_from_token&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find_user_from_token&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Authorization&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos; &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AuthService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On the client side, I store the JWT and include it with every request:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// apollo/client.js&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setContext&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@apollo/client/link/context&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authLink&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;authToken&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;Authorization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Bearer &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&apos;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ApolloClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authLink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;httpLink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;InMemoryCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But here’s where JWTs get tricky…&lt;/p&gt;

&lt;h2 id=&quot;the-jwt-complexity-spiral&quot;&gt;The JWT complexity spiral&lt;/h2&gt;

&lt;p&gt;JWTs seem simple at first, but they get complicated fast. Here are the problems I’ve run into:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can’t revoke them easily.&lt;/strong&gt; If someone steals a JWT, it’s valid until it expires. With sessions, I can just delete the session from my database.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Token refresh is annoying.&lt;/strong&gt; Short-lived tokens mean you need a refresh mechanism. I’ve built systems with refresh tokens stored as httpOnly cookies, but at that point, why not just use sessions?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Storage is tricky.&lt;/strong&gt; localStorage persists across browser sessions but is vulnerable to XSS. sessionStorage gets cleared when users close tabs. Cookies are back to the same-site restrictions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Clock skew causes weird bugs.&lt;/strong&gt; If your server and client clocks are off, tokens might be “expired” before they should be.&lt;/p&gt;

&lt;h2 id=&quot;what-i-actually-do&quot;&gt;What I actually do&lt;/h2&gt;

&lt;p&gt;For 90% of the Rails apps I build, I use cookie sessions with CSRF protection. It’s boring, but it works reliably.&lt;/p&gt;

&lt;p&gt;I only reach for JWTs when I have a genuine cross-domain need or I’m building a native mobile app. And when I do use JWTs, I keep them short-lived (30 minutes max) and implement a proper refresh token system.&lt;/p&gt;

&lt;h2 id=&quot;one-mistake-that-taught-me-a-lesson&quot;&gt;One mistake that taught me a lesson&lt;/h2&gt;

&lt;p&gt;A few years back, I built a system that stored JWTs in localStorage and made them long-lived (24 hours) to avoid the refresh complexity. A penetration test later revealed that a single XSS vulnerability could steal user tokens for an entire day.&lt;/p&gt;

&lt;p&gt;I switched back to short-lived tokens with httpOnly refresh cookies. But at that point, I was basically reinventing sessions with extra steps.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Authentication doesn’t have to be exciting. Sometimes the boring, well-tested approach is exactly what you need.&lt;/p&gt;</content><author><name>Bob Roberts</name></author><category term="security" /><category term="rails" /><category term="authentication" /><category term="authorization" /><category term="jwt" /><category term="sessions" /><category term="apollo" /><category term="react" /><category term="csrf" /><summary type="html">Why I usually stick with boring cookie sessions, when I reach for JWTs, and the authentication mistakes that taught me lessons the hard way.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/covers/auth-sessions-vs-jwt-pro.svg" /><media:content medium="image" url="http://localhost:4000/assets/images/covers/auth-sessions-vs-jwt-pro.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Why I Generate All My TypeScript Types (And You Should Too)</title><link href="http://localhost:4000/react/typescript/2025/01/17/type-safe-react-with-rails-graphql-and-codegen/" rel="alternate" type="text/html" title="Why I Generate All My TypeScript Types (And You Should Too)" /><published>2025-01-17T10:00:00-06:00</published><updated>2025-01-17T10:00:00-06:00</updated><id>http://localhost:4000/react/typescript/2025/01/17/type-safe-react-with-rails-graphql-and-codegen</id><content type="html" xml:base="http://localhost:4000/react/typescript/2025/01/17/type-safe-react-with-rails-graphql-and-codegen/">&lt;p&gt;I used to hand-write TypeScript interfaces for all my GraphQL queries. It was tedious, error-prone, and I constantly had mismatches between what my Rails API returned and what my React components expected.&lt;/p&gt;

&lt;p&gt;Then I discovered GraphQL Code Generator. It’s one of those tools that seems too good to be true until you actually use it.&lt;/p&gt;

&lt;h2 id=&quot;the-problem-i-was-trying-to-solve&quot;&gt;The problem I was trying to solve&lt;/h2&gt;

&lt;p&gt;Picture this: I’d build a feature in Rails, add some fields to a GraphQL type, then spend 20 minutes updating TypeScript interfaces across my React app. Inevitably, I’d miss one. The app would compile fine, but then I’d get &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cannot read property &apos;title&apos; of undefined&lt;/code&gt; at runtime.&lt;/p&gt;

&lt;p&gt;Or worse - I’d refactor a GraphQL field on the server and forget to update the client types. Everything would seem fine until users started hitting errors in production.&lt;/p&gt;

&lt;h2 id=&quot;how-graphql-code-generator-changed-everything&quot;&gt;How GraphQL Code Generator changed everything&lt;/h2&gt;

&lt;p&gt;Instead of manually maintaining TypeScript types, I let the computer generate them directly from my GraphQL schema and queries. Now when I change a field in Rails, my TypeScript types update automatically.&lt;/p&gt;

&lt;p&gt;Here’s how I set it up:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; @graphql-codegen/cli @graphql-codegen/typescript &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  @graphql-codegen/typescript-operations @graphql-codegen/typescript-react-apollo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I add these scripts to package.json:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;codegen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;graphql-codegen --config codegen.yml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;codegen:watch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;graphql-codegen --config codegen.yml --watch&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The watch mode is crucial - it regenerates types whenever I change a query or the schema changes.&lt;/p&gt;

&lt;p&gt;My configuration file looks like this:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# codegen.yml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://localhost:3000/graphql&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;documents&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;src/**/*.{ts,tsx,graphql}&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;generates&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;src/graphql/generated.tsx&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;typescript&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;typescript-operations&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;typescript-react-apollo&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;withHooks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;scalars&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ISO8601DateTime&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This tells codegen to:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Fetch the schema from my Rails dev server&lt;/li&gt;
  &lt;li&gt;Find all GraphQL queries/mutations in my React code&lt;/li&gt;
  &lt;li&gt;Generate TypeScript types and React hooks&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Pro tip:&lt;/strong&gt; For CI builds, I generate a schema file from Rails and point to that instead of hitting the dev server:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# In Rails&lt;/span&gt;
bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rake graphql:schema:dump
&lt;span class=&quot;c&quot;&gt;# Then use schema: schema.graphql in codegen.yml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-magic-happens-when-you-write-queries&quot;&gt;The magic happens when you write queries&lt;/h2&gt;

&lt;p&gt;I write my GraphQL queries in separate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.graphql&lt;/code&gt; files:&lt;/p&gt;

&lt;div class=&quot;language-graphql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# src/queries/users.graphql&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetUsers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createdAt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When I run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm run codegen&lt;/code&gt;, it generates a TypeScript hook that knows exactly what this query returns:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useGetUsersQuery&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;../graphql/generated&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useGetUsersQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Loading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;
&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* TypeScript knows these fields exist! */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;))}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ul&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The best part? If I typo a field name or try to access something that doesn’t exist, TypeScript catches it at compile time.&lt;/p&gt;

&lt;h2 id=&quot;the-nullability-challenge&quot;&gt;The nullability challenge&lt;/h2&gt;

&lt;p&gt;Here’s something that tripped me up early: GraphQL is very explicit about what can be null. If you mark a field as nullable in your Rails schema, TypeScript will reflect that.&lt;/p&gt;

&lt;p&gt;This means you end up with code like:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Lots of optional chaining&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I learned to be deliberate about nullability in my Rails GraphQL types. If a field should always exist, I mark it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null: false&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# In Rails GraphQL type&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This one can be blank&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the few cases where I need to filter out nulls on the client side, I use type guards:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;validUsers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nodes&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NonNullable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;custom-scalars-made-easy&quot;&gt;Custom scalars made easy&lt;/h2&gt;

&lt;p&gt;Rails has some types that don’t exist in JavaScript - like UUIDs and ISO8601 dates. I map these to string types in my codegen config:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;scalars&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ISO8601DateTime&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For extra type safety, I sometimes create “branded” types:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;__brand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;UserId&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ISO8601Date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;__brand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ISO8601Date&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This prevents me from accidentally passing a regular string where I expect a UUID.&lt;/p&gt;

&lt;h2 id=&quot;fragments-keep-me-organized&quot;&gt;Fragments keep me organized&lt;/h2&gt;

&lt;p&gt;When the same data appears in multiple queries, I use GraphQL fragments:&lt;/p&gt;

&lt;div class=&quot;language-graphql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# fragments/UserCard.graphql&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fragment&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserCard&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;avatarUrl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-graphql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# queries/dashboard.graphql&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DashboardData&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentUser&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserCard&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recentUsers&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserCard&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Codegen generates TypeScript types for fragments too, so I can reuse them in components:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserCardFragment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;../graphql/generated&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserCard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserCardFragment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;avatarUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/p&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;what-i-learned-the-hard-way&quot;&gt;What I learned the hard way&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Generated types aren’t magic.&lt;/strong&gt; They only reflect what your schema says, not what your server actually returns. I still validate important data at runtime and handle network errors gracefully.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keep your queries co-located.&lt;/strong&gt; I put GraphQL queries in the same directory as the components that use them. It makes refactoring much easier.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Run codegen in watch mode during development.&lt;/strong&gt; I have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm run codegen:watch&lt;/code&gt; running alongside my dev server. When I change a query, types update instantly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Commit the generated files.&lt;/strong&gt; I used to gitignore the generated types, but that created problems in CI. Now I commit them and my build process validates they’re up to date.&lt;/p&gt;

&lt;h2 id=&quot;the-payoff&quot;&gt;The payoff&lt;/h2&gt;

&lt;p&gt;GraphQL Code Generator eliminated an entire class of bugs from my apps. I catch schema mismatches at compile time instead of in production. Refactoring became fearless - if I change a field in Rails, TypeScript tells me exactly which components need updating.&lt;/p&gt;

&lt;p&gt;It took about a day to set up the first time, but it’s saved me weeks of debugging over the past year. If you’re using GraphQL with TypeScript, this is a no-brainer.&lt;/p&gt;</content><author><name>Bob Roberts</name></author><category term="react" /><category term="typescript" /><category term="typescript" /><category term="react" /><category term="graphql" /><category term="codegen" /><category term="ruby-on-rails" /><summary type="html">How GraphQL Code Generator saved me from runtime surprises and made my Rails + React apps much more reliable. Plus the gotchas I wish I&apos;d known earlier.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/covers/type-safe-react-rails-pro.svg" /><media:content medium="image" url="http://localhost:4000/assets/images/covers/type-safe-react-rails-pro.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>